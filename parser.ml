type token =
  | INTLITERAL of (int)
  | DURATIONCONST of (string)
  | NOTECONST of (string)
  | BOOLLITERAL of (bool)
  | ID of (string)
  | LEFTPAREN
  | RIGHTPAREN
  | LBRAC
  | RBRAC
  | EOF
  | INT
  | NOTE
  | CHORD
  | SCALE
  | STANZA
  | SCORE
  | VOID
  | BOOL
  | IN
  | IF
  | ELSE
  | NOELSE
  | ELSIF
  | WHILE
  | FOREACH
  | ASSIGN
  | PLUSEQ
  | MINUSEQ
  | TIMESEQ
  | DIVIDEEQ
  | MOD
  | AND
  | OR
  | MODEQ
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | IS
  | ISNT
  | LT
  | LEQ
  | GT
  | GEQ
  | PLUSPLUS
  | MINUSMINUS
  | SHARP
  | FLAT
  | RAISE
  | LOWER
  | METH
  | RETURN
  | END
  | SEMICOLON
  | COMMA
  | DOT

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 64 "parser.ml"
let yytransl_const = [|
  262 (* LEFTPAREN *);
  263 (* RIGHTPAREN *);
  264 (* LBRAC *);
  265 (* RBRAC *);
    0 (* EOF *);
  266 (* INT *);
  267 (* NOTE *);
  268 (* CHORD *);
  269 (* SCALE *);
  270 (* STANZA *);
  271 (* SCORE *);
  272 (* VOID *);
  273 (* BOOL *);
  274 (* IN *);
  275 (* IF *);
  276 (* ELSE *);
  277 (* NOELSE *);
  278 (* ELSIF *);
  279 (* WHILE *);
  280 (* FOREACH *);
  281 (* ASSIGN *);
  282 (* PLUSEQ *);
  283 (* MINUSEQ *);
  284 (* TIMESEQ *);
  285 (* DIVIDEEQ *);
  286 (* MOD *);
  287 (* AND *);
  288 (* OR *);
  289 (* MODEQ *);
  290 (* PLUS *);
  291 (* MINUS *);
  292 (* TIMES *);
  293 (* DIVIDE *);
  294 (* IS *);
  295 (* ISNT *);
  296 (* LT *);
  297 (* LEQ *);
  298 (* GT *);
  299 (* GEQ *);
  300 (* PLUSPLUS *);
  301 (* MINUSMINUS *);
  302 (* SHARP *);
  303 (* FLAT *);
  304 (* RAISE *);
  305 (* LOWER *);
  306 (* METH *);
  307 (* RETURN *);
  308 (* END *);
  309 (* SEMICOLON *);
  310 (* COMMA *);
  311 (* DOT *);
    0|]

let yytransl_block = [|
  257 (* INTLITERAL *);
  258 (* DURATIONCONST *);
  259 (* NOTECONST *);
  260 (* BOOLLITERAL *);
  261 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\003\000\003\000\004\000\004\000\004\000\002\000\
\002\000\002\000\002\000\005\000\006\000\008\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\011\000\011\000\
\012\000\012\000\013\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\015\000\015\000\016\000\016\000\016\000\017\000\
\017\000\014\000\014\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\018\000\018\000\
\019\000\019\000\000\000"

let yylen = "\002\000\
\000\000\002\000\000\000\002\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\003\000\005\000\008\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\000\000\001\000\
\001\000\003\000\002\000\002\000\003\000\003\000\007\000\009\000\
\006\000\008\000\000\000\005\000\001\000\001\000\001\000\001\000\
\003\000\000\000\001\000\001\000\003\000\001\000\001\000\001\000\
\007\000\007\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\002\000\002\000\
\002\000\002\000\002\000\002\000\003\000\004\000\000\000\001\000\
\001\000\003\000\002\000"

let yydefred = "\000\000\
\001\000\000\000\000\000\046\000\047\000\048\000\000\000\000\000\
\003\000\000\000\015\000\016\000\017\000\018\000\020\000\021\000\
\022\000\019\000\000\000\000\000\000\000\000\000\000\000\002\000\
\008\000\009\000\011\000\010\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\071\000\072\000\073\000\074\000\075\000\076\000\028\000\000\000\
\000\000\000\000\045\000\000\000\000\000\077\000\030\000\004\000\
\005\000\006\000\007\000\051\000\000\000\000\000\000\000\000\000\
\000\000\000\000\029\000\000\000\012\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\078\000\000\000\000\000\000\000\000\000\003\000\003\000\027\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\025\000\013\000\037\000\039\000\038\000\
\000\000\000\000\000\000\000\000\033\000\003\000\003\000\000\000\
\049\000\050\000\000\000\003\000\031\000\000\000\000\000\026\000\
\000\000\000\000\034\000\014\000\003\000\032\000\000\000"

let yydgoto = "\002\000\
\003\000\024\000\036\000\080\000\081\000\082\000\083\000\028\000\
\029\000\030\000\130\000\131\000\089\000\044\000\140\000\137\000\
\038\000\073\000\074\000"

let yysindex = "\003\000\
\000\000\000\000\223\255\000\000\000\000\000\000\002\255\101\000\
\000\000\134\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\255\001\255\011\255\082\255\134\000\000\000\
\000\000\000\000\000\000\000\000\009\255\098\003\134\000\013\255\
\221\254\134\000\084\002\059\255\156\003\007\255\134\000\134\000\
\082\255\016\255\156\003\225\254\060\255\134\000\134\000\134\000\
\134\000\134\000\134\000\134\000\134\000\134\000\134\000\134\000\
\134\000\134\000\134\000\134\000\134\000\134\000\134\000\134\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\156\003\
\017\255\229\254\000\000\134\000\025\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\134\000\127\002\170\002\023\255\
\012\255\083\255\000\000\134\000\000\000\206\003\181\003\181\003\
\206\003\206\003\021\000\246\003\226\003\206\003\030\004\030\004\
\021\000\021\000\010\004\010\004\015\000\015\000\015\000\015\000\
\000\000\134\000\068\003\231\254\156\003\000\000\000\000\000\000\
\028\255\082\255\127\003\156\003\008\255\008\255\247\255\114\255\
\079\255\095\255\033\255\000\000\000\000\000\000\000\000\000\000\
\096\255\098\255\085\255\241\254\000\000\000\000\000\000\082\255\
\000\000\000\000\134\000\000\000\000\000\139\255\169\255\000\000\
\213\002\193\255\000\000\000\000\000\000\000\000\020\000"

let yyrindex = "\000\000\
\000\000\000\000\109\000\000\000\000\000\000\000\047\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\061\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\105\255\000\000\
\000\003\000\000\000\000\000\000\026\255\000\000\000\000\000\000\
\000\000\000\000\063\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\255\
\000\000\134\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\002\081\255\208\001\
\023\002\031\002\090\000\215\001\248\001\054\002\201\000\238\000\
\127\000\164\000\167\001\200\001\019\001\056\001\093\001\130\001\
\000\000\000\000\000\000\043\003\027\255\000\000\000\000\000\000\
\000\000\141\255\000\000\005\255\000\000\000\000\080\255\000\000\
\000\000\000\000\150\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\084\255"

let yygindex = "\000\000\
\000\000\000\000\203\002\000\000\156\000\157\000\158\000\000\000\
\235\255\248\255\000\000\000\000\137\255\000\000\000\000\038\000\
\133\000\000\000\000\000"

let yytablesize = 1359
let yytable = "\035\000\
\042\000\037\000\132\000\001\000\148\000\039\000\040\000\031\000\
\134\000\135\000\081\000\082\000\136\000\045\000\043\000\084\000\
\041\000\075\000\076\000\088\000\090\000\091\000\072\000\113\000\
\152\000\037\000\114\000\120\000\126\000\121\000\086\000\087\000\
\129\000\116\000\040\000\041\000\149\000\094\000\095\000\096\000\
\097\000\098\000\099\000\100\000\101\000\102\000\103\000\104\000\
\105\000\106\000\107\000\108\000\109\000\110\000\111\000\112\000\
\032\000\081\000\082\000\004\000\085\000\005\000\006\000\007\000\
\008\000\009\000\010\000\115\000\011\000\012\000\013\000\014\000\
\015\000\016\000\017\000\018\000\117\000\019\000\085\000\040\000\
\041\000\020\000\021\000\123\000\092\000\142\000\144\000\053\000\
\122\000\053\000\147\000\011\000\012\000\013\000\014\000\015\000\
\016\000\017\000\018\000\035\000\088\000\143\000\145\000\036\000\
\146\000\124\000\053\000\053\000\083\000\023\000\079\000\079\000\
\093\000\042\000\004\000\043\000\005\000\006\000\007\000\008\000\
\009\000\010\000\088\000\011\000\012\000\013\000\014\000\015\000\
\016\000\017\000\018\000\035\000\019\000\053\000\053\000\036\000\
\020\000\021\000\153\000\004\000\080\000\005\000\006\000\007\000\
\008\000\009\000\010\000\023\000\011\000\012\000\013\000\014\000\
\015\000\016\000\017\000\018\000\024\000\019\000\025\000\026\000\
\027\000\020\000\021\000\138\000\023\000\141\000\077\000\000\000\
\000\000\004\000\000\000\005\000\006\000\007\000\008\000\009\000\
\010\000\000\000\011\000\012\000\013\000\014\000\015\000\016\000\
\017\000\018\000\000\000\019\000\000\000\023\000\155\000\020\000\
\021\000\004\000\000\000\005\000\006\000\007\000\008\000\009\000\
\010\000\000\000\011\000\012\000\013\000\014\000\015\000\016\000\
\017\000\018\000\000\000\019\000\000\000\000\000\000\000\020\000\
\021\000\000\000\000\000\023\000\156\000\000\000\000\000\004\000\
\000\000\005\000\006\000\007\000\008\000\009\000\010\000\000\000\
\011\000\012\000\013\000\014\000\015\000\016\000\017\000\018\000\
\000\000\019\000\000\000\023\000\158\000\020\000\021\000\004\000\
\000\000\005\000\006\000\007\000\008\000\009\000\010\000\000\000\
\011\000\012\000\013\000\014\000\015\000\016\000\017\000\018\000\
\000\000\019\000\000\000\000\000\139\000\020\000\021\000\000\000\
\022\000\023\000\000\000\000\000\004\000\000\000\005\000\006\000\
\007\000\008\000\009\000\010\000\000\000\011\000\012\000\013\000\
\014\000\015\000\016\000\017\000\018\000\000\000\019\000\000\000\
\000\000\023\000\020\000\021\000\051\000\000\000\000\000\000\000\
\055\000\056\000\057\000\058\000\000\000\044\000\000\000\044\000\
\000\000\000\000\065\000\066\000\067\000\068\000\069\000\070\000\
\065\000\066\000\067\000\068\000\069\000\070\000\023\000\044\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\062\000\000\000\062\000\044\000\044\000\004\000\000\000\033\000\
\006\000\007\000\008\000\000\000\034\000\000\000\000\000\000\000\
\000\000\000\000\062\000\062\000\062\000\062\000\062\000\062\000\
\062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
\062\000\062\000\062\000\062\000\062\000\060\000\004\000\060\000\
\005\000\006\000\007\000\008\000\000\000\010\000\062\000\062\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\060\000\
\060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
\060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
\060\000\060\000\061\000\000\000\061\000\000\000\000\000\000\000\
\000\000\000\000\000\000\060\000\060\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\061\000\061\000\061\000\061\000\
\061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
\061\000\061\000\061\000\061\000\061\000\061\000\061\000\058\000\
\000\000\058\000\000\000\000\000\000\000\000\000\000\000\000\000\
\061\000\061\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\058\000\058\000\058\000\058\000\058\000\000\000\058\000\
\058\000\058\000\058\000\058\000\000\000\000\000\058\000\058\000\
\058\000\058\000\058\000\058\000\059\000\000\000\059\000\000\000\
\000\000\000\000\000\000\000\000\000\000\058\000\058\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\059\000\059\000\
\059\000\059\000\059\000\000\000\059\000\059\000\059\000\059\000\
\059\000\000\000\000\000\059\000\059\000\059\000\059\000\059\000\
\059\000\067\000\000\000\067\000\000\000\000\000\000\000\000\000\
\000\000\000\000\059\000\059\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\067\000\067\000\067\000\067\000\067\000\
\000\000\067\000\067\000\067\000\000\000\000\000\000\000\000\000\
\067\000\067\000\067\000\067\000\067\000\067\000\068\000\000\000\
\068\000\000\000\000\000\000\000\000\000\000\000\000\000\067\000\
\067\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\068\000\068\000\068\000\068\000\068\000\000\000\068\000\068\000\
\068\000\000\000\000\000\000\000\000\000\068\000\068\000\068\000\
\068\000\068\000\068\000\069\000\000\000\069\000\000\000\000\000\
\000\000\000\000\000\000\000\000\068\000\068\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\069\000\069\000\069\000\
\069\000\069\000\000\000\069\000\069\000\069\000\000\000\000\000\
\000\000\000\000\069\000\069\000\069\000\069\000\069\000\069\000\
\070\000\000\000\070\000\000\000\000\000\000\000\000\000\000\000\
\000\000\069\000\069\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\070\000\070\000\070\000\070\000\070\000\000\000\
\070\000\070\000\070\000\000\000\000\000\000\000\000\000\070\000\
\070\000\070\000\070\000\070\000\070\000\065\000\000\000\065\000\
\000\000\000\000\000\000\000\000\000\000\000\000\070\000\070\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\065\000\
\065\000\065\000\065\000\065\000\000\000\065\000\065\000\065\000\
\000\000\000\000\000\000\000\000\065\000\065\000\066\000\000\000\
\066\000\000\000\000\000\000\000\000\000\000\000\054\000\000\000\
\054\000\000\000\000\000\065\000\065\000\063\000\000\000\063\000\
\066\000\066\000\066\000\066\000\066\000\000\000\066\000\066\000\
\066\000\054\000\054\000\000\000\000\000\066\000\066\000\063\000\
\063\000\063\000\063\000\063\000\000\000\063\000\063\000\063\000\
\000\000\000\000\000\000\000\000\066\000\066\000\064\000\000\000\
\064\000\000\000\000\000\000\000\054\000\054\000\052\000\000\000\
\052\000\000\000\000\000\063\000\063\000\000\000\000\000\000\000\
\064\000\064\000\064\000\064\000\064\000\000\000\000\000\064\000\
\064\000\052\000\052\000\052\000\052\000\055\000\000\000\055\000\
\052\000\000\000\000\000\000\000\000\000\056\000\000\000\056\000\
\000\000\000\000\000\000\000\000\064\000\064\000\000\000\000\000\
\055\000\055\000\055\000\055\000\052\000\052\000\000\000\055\000\
\056\000\056\000\056\000\056\000\057\000\000\000\057\000\056\000\
\127\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\055\000\055\000\000\000\000\000\057\000\
\057\000\057\000\057\000\056\000\056\000\000\000\057\000\000\000\
\150\000\151\000\078\000\000\000\000\000\000\000\154\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\159\000\
\000\000\000\000\057\000\057\000\046\000\047\000\048\000\049\000\
\050\000\051\000\052\000\053\000\054\000\055\000\056\000\057\000\
\058\000\059\000\060\000\061\000\062\000\063\000\064\000\065\000\
\066\000\067\000\068\000\069\000\070\000\118\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\046\000\
\047\000\048\000\049\000\050\000\051\000\052\000\053\000\054\000\
\055\000\056\000\057\000\058\000\059\000\060\000\061\000\062\000\
\063\000\064\000\065\000\066\000\067\000\068\000\069\000\070\000\
\119\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\046\000\047\000\048\000\049\000\050\000\051\000\
\052\000\053\000\054\000\055\000\056\000\057\000\058\000\059\000\
\060\000\061\000\062\000\063\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\157\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\046\000\047\000\048\000\
\049\000\050\000\051\000\052\000\053\000\054\000\055\000\056\000\
\057\000\058\000\059\000\060\000\061\000\062\000\063\000\064\000\
\065\000\066\000\067\000\068\000\069\000\070\000\047\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\051\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\051\000\051\000\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\046\000\047\000\048\000\049\000\
\050\000\051\000\052\000\053\000\054\000\055\000\056\000\057\000\
\058\000\059\000\060\000\061\000\062\000\063\000\064\000\065\000\
\066\000\067\000\068\000\069\000\070\000\000\000\000\000\000\000\
\000\000\125\000\046\000\047\000\048\000\049\000\050\000\051\000\
\052\000\053\000\054\000\055\000\056\000\057\000\058\000\059\000\
\060\000\061\000\062\000\063\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\000\000\000\000\000\000\071\000\046\000\
\047\000\048\000\049\000\050\000\051\000\052\000\053\000\054\000\
\055\000\056\000\057\000\058\000\059\000\060\000\061\000\062\000\
\063\000\064\000\065\000\066\000\067\000\068\000\069\000\070\000\
\000\000\000\000\000\000\133\000\046\000\047\000\048\000\049\000\
\050\000\051\000\052\000\053\000\054\000\055\000\056\000\057\000\
\058\000\059\000\060\000\061\000\062\000\063\000\064\000\065\000\
\066\000\067\000\068\000\069\000\070\000\046\000\000\000\000\000\
\049\000\050\000\051\000\052\000\053\000\054\000\055\000\056\000\
\057\000\058\000\059\000\060\000\061\000\062\000\063\000\064\000\
\065\000\066\000\067\000\068\000\069\000\070\000\046\000\000\000\
\000\000\000\000\000\000\051\000\052\000\053\000\000\000\055\000\
\056\000\057\000\058\000\059\000\060\000\061\000\062\000\063\000\
\064\000\065\000\066\000\067\000\068\000\069\000\070\000\051\000\
\052\000\000\000\000\000\055\000\056\000\057\000\058\000\059\000\
\060\000\061\000\062\000\063\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\051\000\000\000\000\000\000\000\055\000\
\056\000\057\000\058\000\059\000\060\000\061\000\062\000\063\000\
\064\000\065\000\066\000\067\000\068\000\069\000\070\000\051\000\
\000\000\000\000\000\000\055\000\056\000\057\000\058\000\000\000\
\000\000\061\000\062\000\063\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\051\000\000\000\000\000\000\000\000\000\
\000\000\057\000\058\000\000\000\000\000\000\000\000\000\000\000\
\000\000\065\000\066\000\067\000\068\000\069\000\070\000"

let yycheck = "\008\000\
\022\000\010\000\122\000\001\000\020\001\006\001\006\001\006\001\
\001\001\002\001\007\001\007\001\005\001\005\001\023\000\009\001\
\006\001\005\001\054\001\041\000\005\001\053\001\031\000\007\001\
\144\000\034\000\054\001\005\001\054\001\018\001\039\000\040\000\
\005\001\009\001\009\001\009\001\052\001\046\000\047\000\048\000\
\049\000\050\000\051\000\052\000\053\000\054\000\055\000\056\000\
\057\000\058\000\059\000\060\000\061\000\062\000\063\000\064\000\
\055\001\054\001\054\001\001\001\054\001\003\001\004\001\005\001\
\006\001\007\001\008\001\076\000\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\085\000\019\001\054\001\054\001\
\054\001\023\001\024\001\092\000\025\001\007\001\054\001\007\001\
\006\001\009\001\006\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\020\001\122\000\007\001\007\001\020\001\
\007\001\114\000\026\001\027\001\000\000\051\001\052\001\007\001\
\053\001\053\001\001\001\053\001\003\001\004\001\005\001\006\001\
\007\001\008\001\144\000\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\052\001\019\001\053\001\054\001\052\001\
\023\001\024\001\147\000\001\001\007\001\003\001\004\001\005\001\
\006\001\007\001\008\001\007\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\007\001\019\001\003\000\003\000\
\003\000\023\001\024\001\126\000\051\001\052\001\034\000\255\255\
\255\255\001\001\255\255\003\001\004\001\005\001\006\001\007\001\
\008\001\255\255\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\255\255\051\001\052\001\023\001\
\024\001\001\001\255\255\003\001\004\001\005\001\006\001\007\001\
\008\001\255\255\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\255\255\255\255\255\255\023\001\
\024\001\255\255\255\255\051\001\052\001\255\255\255\255\001\001\
\255\255\003\001\004\001\005\001\006\001\007\001\008\001\255\255\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\255\255\019\001\255\255\051\001\052\001\023\001\024\001\001\001\
\255\255\003\001\004\001\005\001\006\001\007\001\008\001\255\255\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\255\255\019\001\255\255\255\255\022\001\023\001\024\001\255\255\
\050\001\051\001\255\255\255\255\001\001\255\255\003\001\004\001\
\005\001\006\001\007\001\008\001\255\255\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\019\001\255\255\
\255\255\051\001\023\001\024\001\030\001\255\255\255\255\255\255\
\034\001\035\001\036\001\037\001\255\255\007\001\255\255\009\001\
\255\255\255\255\044\001\045\001\046\001\047\001\048\001\049\001\
\044\001\045\001\046\001\047\001\048\001\049\001\051\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\007\001\255\255\009\001\053\001\054\001\001\001\255\255\003\001\
\004\001\005\001\006\001\255\255\008\001\255\255\255\255\255\255\
\255\255\255\255\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\007\001\001\001\009\001\
\003\001\004\001\005\001\006\001\255\255\008\001\053\001\054\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\007\001\255\255\009\001\255\255\255\255\255\255\
\255\255\255\255\255\255\053\001\054\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\007\001\
\255\255\009\001\255\255\255\255\255\255\255\255\255\255\255\255\
\053\001\054\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\025\001\026\001\027\001\028\001\029\001\255\255\031\001\
\032\001\033\001\034\001\035\001\255\255\255\255\038\001\039\001\
\040\001\041\001\042\001\043\001\007\001\255\255\009\001\255\255\
\255\255\255\255\255\255\255\255\255\255\053\001\054\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\025\001\026\001\
\027\001\028\001\029\001\255\255\031\001\032\001\033\001\034\001\
\035\001\255\255\255\255\038\001\039\001\040\001\041\001\042\001\
\043\001\007\001\255\255\009\001\255\255\255\255\255\255\255\255\
\255\255\255\255\053\001\054\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\025\001\026\001\027\001\028\001\029\001\
\255\255\031\001\032\001\033\001\255\255\255\255\255\255\255\255\
\038\001\039\001\040\001\041\001\042\001\043\001\007\001\255\255\
\009\001\255\255\255\255\255\255\255\255\255\255\255\255\053\001\
\054\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\025\001\026\001\027\001\028\001\029\001\255\255\031\001\032\001\
\033\001\255\255\255\255\255\255\255\255\038\001\039\001\040\001\
\041\001\042\001\043\001\007\001\255\255\009\001\255\255\255\255\
\255\255\255\255\255\255\255\255\053\001\054\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\025\001\026\001\027\001\
\028\001\029\001\255\255\031\001\032\001\033\001\255\255\255\255\
\255\255\255\255\038\001\039\001\040\001\041\001\042\001\043\001\
\007\001\255\255\009\001\255\255\255\255\255\255\255\255\255\255\
\255\255\053\001\054\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\025\001\026\001\027\001\028\001\029\001\255\255\
\031\001\032\001\033\001\255\255\255\255\255\255\255\255\038\001\
\039\001\040\001\041\001\042\001\043\001\007\001\255\255\009\001\
\255\255\255\255\255\255\255\255\255\255\255\255\053\001\054\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\025\001\
\026\001\027\001\028\001\029\001\255\255\031\001\032\001\033\001\
\255\255\255\255\255\255\255\255\038\001\039\001\007\001\255\255\
\009\001\255\255\255\255\255\255\255\255\255\255\007\001\255\255\
\009\001\255\255\255\255\053\001\054\001\007\001\255\255\009\001\
\025\001\026\001\027\001\028\001\029\001\255\255\031\001\032\001\
\033\001\026\001\027\001\255\255\255\255\038\001\039\001\025\001\
\026\001\027\001\028\001\029\001\255\255\031\001\032\001\033\001\
\255\255\255\255\255\255\255\255\053\001\054\001\007\001\255\255\
\009\001\255\255\255\255\255\255\053\001\054\001\007\001\255\255\
\009\001\255\255\255\255\053\001\054\001\255\255\255\255\255\255\
\025\001\026\001\027\001\028\001\029\001\255\255\255\255\032\001\
\033\001\026\001\027\001\028\001\029\001\007\001\255\255\009\001\
\033\001\255\255\255\255\255\255\255\255\007\001\255\255\009\001\
\255\255\255\255\255\255\255\255\053\001\054\001\255\255\255\255\
\026\001\027\001\028\001\029\001\053\001\054\001\255\255\033\001\
\026\001\027\001\028\001\029\001\007\001\255\255\009\001\033\001\
\118\000\119\000\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\053\001\054\001\255\255\255\255\026\001\
\027\001\028\001\029\001\053\001\054\001\255\255\033\001\255\255\
\142\000\143\000\007\001\255\255\255\255\255\255\148\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\157\000\
\255\255\255\255\053\001\054\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\007\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\007\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\007\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\007\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\007\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\255\255\255\255\255\255\
\255\255\054\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\255\255\255\255\255\255\053\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\255\255\255\255\255\255\053\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\025\001\255\255\255\255\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\025\001\255\255\
\255\255\255\255\255\255\030\001\031\001\032\001\255\255\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\030\001\
\031\001\255\255\255\255\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\030\001\255\255\255\255\255\255\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\030\001\
\255\255\255\255\255\255\034\001\035\001\036\001\037\001\255\255\
\255\255\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\030\001\255\255\255\255\255\255\255\255\
\255\255\036\001\037\001\255\255\255\255\255\255\255\255\255\255\
\255\255\044\001\045\001\046\001\047\001\048\001\049\001"

let yynames_const = "\
  LEFTPAREN\000\
  RIGHTPAREN\000\
  LBRAC\000\
  RBRAC\000\
  EOF\000\
  INT\000\
  NOTE\000\
  CHORD\000\
  SCALE\000\
  STANZA\000\
  SCORE\000\
  VOID\000\
  BOOL\000\
  IN\000\
  IF\000\
  ELSE\000\
  NOELSE\000\
  ELSIF\000\
  WHILE\000\
  FOREACH\000\
  ASSIGN\000\
  PLUSEQ\000\
  MINUSEQ\000\
  TIMESEQ\000\
  DIVIDEEQ\000\
  MOD\000\
  AND\000\
  OR\000\
  MODEQ\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  IS\000\
  ISNT\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  PLUSPLUS\000\
  MINUSMINUS\000\
  SHARP\000\
  FLAT\000\
  RAISE\000\
  LOWER\000\
  METH\000\
  RETURN\000\
  END\000\
  SEMICOLON\000\
  COMMA\000\
  DOT\000\
  "

let yynames_block = "\
  INTLITERAL\000\
  DURATIONCONST\000\
  NOTECONST\000\
  BOOLLITERAL\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 74 "parser.mly"
                 ( [] )
# 642 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.program) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'generic) in
    Obj.repr(
# 75 "parser.mly"
                    ( _2 :: _1 )
# 650 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 78 "parser.mly"
                 ( [] )
# 656 "parser.ml"
               : 'abstraction))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'abstraction) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'innerblock) in
    Obj.repr(
# 79 "parser.mly"
                           ( _2 :: _1 )
# 664 "parser.ml"
               : 'abstraction))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 82 "parser.mly"
       ( VDecl2(_1) )
# 671 "parser.ml"
               : 'innerblock))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fullvdecl) in
    Obj.repr(
# 83 "parser.mly"
             ( FullDecl2(_1) )
# 678 "parser.ml"
               : 'innerblock))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 84 "parser.mly"
             ( Stmt2(_1) )
# 685 "parser.ml"
               : 'innerblock))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 87 "parser.mly"
          ( VDecl(_1) )
# 692 "parser.ml"
               : 'generic))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fullvdecl) in
    Obj.repr(
# 88 "parser.mly"
              ( FullDecl(_1) )
# 699 "parser.ml"
               : 'generic))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'methdecl) in
    Obj.repr(
# 89 "parser.mly"
             ( MDecl(_1) )
# 706 "parser.ml"
               : 'generic))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 90 "parser.mly"
              ( Stmt(_1) )
# 713 "parser.ml"
               : 'generic))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cb_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 94 "parser.mly"
  ({ vartype = _1;
			varname = _2 })
# 722 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'cb_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 98 "parser.mly"
                                  ({ fvtype = _1;
										fvname = _2;
										fvexpr = _4 })
# 733 "parser.ml"
               : 'fullvdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'cb_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'meth_params) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'abstraction) in
    Obj.repr(
# 104 "parser.mly"
  ( {
			rettype = _2;
			fname = _3;
			formals = _5;
			body = List.rev _7 } )
# 747 "parser.ml"
               : 'methdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 111 "parser.mly"
                                           ( Int )
# 753 "parser.ml"
               : 'cb_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 112 "parser.mly"
                                          ( Note )
# 759 "parser.ml"
               : 'cb_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 113 "parser.mly"
                                            ( Chord )
# 765 "parser.ml"
               : 'cb_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 114 "parser.mly"
                                          ( Scale )
# 771 "parser.ml"
               : 'cb_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 115 "parser.mly"
                                          ( Bool )
# 777 "parser.ml"
               : 'cb_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 116 "parser.mly"
                                          ( Stanza )
# 783 "parser.ml"
               : 'cb_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 117 "parser.mly"
                                         ( Score )
# 789 "parser.ml"
               : 'cb_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 118 "parser.mly"
                                       ( Void )
# 795 "parser.ml"
               : 'cb_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 121 "parser.mly"
 ( [] )
# 801 "parser.ml"
               : 'meth_params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param_list) in
    Obj.repr(
# 122 "parser.mly"
              ( List.rev(_1) )
# 808 "parser.ml"
               : 'meth_params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param_decl) in
    Obj.repr(
# 125 "parser.mly"
            ( [_1] )
# 815 "parser.ml"
               : 'param_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'param_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'param_decl) in
    Obj.repr(
# 126 "parser.mly"
                               ( _3 :: _1 )
# 823 "parser.ml"
               : 'param_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'cb_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 130 "parser.mly"
  ( {	paramname = _2;
			paramtype = _1 } )
# 832 "parser.ml"
               : 'param_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 140 "parser.mly"
                ( Expr(_1) )
# 839 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 141 "parser.mly"
                             ( Return(_2) )
# 846 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'abstraction) in
    Obj.repr(
# 142 "parser.mly"
                              ( Block(List.rev _2) )
# 853 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'abstraction) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'elsif_statement) in
    Obj.repr(
# 143 "parser.mly"
                                                                             ( If(_3, _5, _6, Block([])) )
# 862 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'abstraction) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'elsif_statement) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'abstraction) in
    Obj.repr(
# 144 "parser.mly"
                                                                                 ( If(_3, _5, _6, Block(List.rev _8)) )
# 872 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'abstraction) in
    Obj.repr(
# 145 "parser.mly"
                                                   ( While(_3, _5) )
# 880 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'param_decl) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'abstraction) in
    Obj.repr(
# 146 "parser.mly"
                                                                 ( Foreach(_3, _5, _7))
# 889 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 149 "parser.mly"
                    ( Block([]) )
# 895 "parser.ml"
               : 'elsif_statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'abstraction) in
    Obj.repr(
# 150 "parser.mly"
                                               ( ElseIf(_3, _5) )
# 903 "parser.ml"
               : 'elsif_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 153 "parser.mly"
            ( IntLiteral(_1) )
# 910 "parser.ml"
               : 'duration_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 154 "parser.mly"
      ( Id(_1) )
# 917 "parser.ml"
               : 'duration_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 155 "parser.mly"
                 ( DurConst(_1) )
# 924 "parser.ml"
               : 'duration_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 163 "parser.mly"
       ( [_1] )
# 931 "parser.ml"
               : 'generic_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'generic_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 164 "parser.mly"
                           ( _3 :: _1 )
# 939 "parser.ml"
               : 'generic_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 169 "parser.mly"
               ( NoExpr )
# 945 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 170 "parser.mly"
        ( _1 )
# 952 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 173 "parser.mly"
    ( Id(_1) )
# 959 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 174 "parser.mly"
             ( MemberAccess(_1, _3) )
# 967 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 175 "parser.mly"
              ( IntLiteral(_1) )
# 974 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 176 "parser.mly"
             ( NoteConst(_1))
# 981 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 177 "parser.mly"
               (BoolLiteral(_1))
# 988 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'duration_expr) in
    Obj.repr(
# 182 "parser.mly"
                                                                  ( NoteExpr(_2, _4, _6) )
# 997 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'generic_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'duration_expr) in
    Obj.repr(
# 183 "parser.mly"
                                                                       ( ChordExpr(_3, _6) )
# 1005 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'generic_list) in
    Obj.repr(
# 184 "parser.mly"
                            ( ListExpr(_2) )
# 1012 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 186 "parser.mly"
                         ( Assign(_1, _3) )
# 1020 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 187 "parser.mly"
                       ( Assign(_1, BinOp(_1, Add, _3)) )
# 1028 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 188 "parser.mly"
                     ( Assign(_1, BinOp(_1, Sub, _3)) )
# 1036 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 189 "parser.mly"
                     ( Assign(_1, BinOp(_1, Mult, _3)) )
# 1044 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 190 "parser.mly"
                      ( Assign(_1, BinOp(_1, Div, _3)) )
# 1052 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 191 "parser.mly"
                   ( Assign(_1, BinOp(_1, Mod, _3)) )
# 1060 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 192 "parser.mly"
                  ( BinOp(_1, Add, _3) )
# 1068 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 193 "parser.mly"
                   ( BinOp(_1, Sub, _3) )
# 1076 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 194 "parser.mly"
                   ( BinOp(_1, Mult, _3) )
# 1084 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 195 "parser.mly"
                    ( BinOp(_1, Div, _3) )
# 1092 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 196 "parser.mly"
                 ( BinOp(_1, Mod, _3) )
# 1100 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 197 "parser.mly"
                 ( BinOp(_1, And, _3) )
# 1108 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 198 "parser.mly"
                ( BinOp(_1, Or, _3) )
# 1116 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 199 "parser.mly"
                ( BinOp(_1, Eq, _3) )
# 1124 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 200 "parser.mly"
                  ( BinOp(_1, NEq, _3) )
# 1132 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 201 "parser.mly"
                ( BinOp(_1, Less, _3) )
# 1140 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 202 "parser.mly"
                 ( BinOp(_1, LEq, _3) )
# 1148 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 203 "parser.mly"
                ( BinOp(_1, Greater, _3) )
# 1156 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 204 "parser.mly"
                 ( BinOp(_1, GEq, _3) )
# 1164 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 205 "parser.mly"
                 ( Assign(_1, BinOp(_1, Add, IntLiteral(1))) )
# 1171 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 206 "parser.mly"
                   ( Assign(_1, BinOp(_1, Sub, IntLiteral(1))) )
# 1178 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 207 "parser.mly"
              ( UnaryOp(Sharp, _1) )
# 1185 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 208 "parser.mly"
              ( UnaryOp(Flat, _1) )
# 1192 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 209 "parser.mly"
              ( UnaryOp(Raise, _1) )
# 1199 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 210 "parser.mly"
              ( UnaryOp(Lower, _1) )
# 1206 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 211 "parser.mly"
                             ( _2 )
# 1213 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 212 "parser.mly"
                                       ( MethodCall(_1, _3) )
# 1221 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 215 "parser.mly"
 ( [] )
# 1227 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 216 "parser.mly"
                ( List.rev _1 )
# 1234 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 219 "parser.mly"
      ( [_1] )
# 1241 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 220 "parser.mly"
                           ( _3 :: _1 )
# 1249 "parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
