type token =
  | INTLITERAL of (int)
  | OCTAVE of (int)
  | DURATIONINT of (int)
  | DURATIONCONST of (string)
  | DATATYPE of (string)
  | NOTECONST of (string)
  | ID of (string)
  | LEFTPAREN
  | RIGHTPAREN
  | LBRAC
  | RBRAC
  | INT
  | NOTE
  | CHORD
  | SCALE
  | STANZA
  | SCORE
  | BOOL
  | IN
  | IF
  | ELSE
  | NOELSE
  | WHILE
  | FOREACH
  | ASSIGN
  | PLUSEQ
  | MINUSEQ
  | TIMESEQ
  | DIVIDEEQ
  | MOD
  | MODEQ
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | IS
  | ISNT
  | LT
  | LEQ
  | GT
  | GEQ
  | PLUSPLUS
  | MINUSMINUS
  | SHARP
  | FLAT
  | RAISE
  | LOWER
  | METH
  | RETURN
  | END
  | SEMICOLON
  | COMMA
  | DOT

open Parsing;;
# 1 "parser.mly"
 open Ast 
# 60 "parser.ml"
let yytransl_const = [|
  264 (* LEFTPAREN *);
  265 (* RIGHTPAREN *);
  266 (* LBRAC *);
  267 (* RBRAC *);
  268 (* INT *);
  269 (* NOTE *);
  270 (* CHORD *);
  271 (* SCALE *);
  272 (* STANZA *);
  273 (* SCORE *);
  274 (* BOOL *);
  275 (* IN *);
  276 (* IF *);
  277 (* ELSE *);
  278 (* NOELSE *);
  279 (* WHILE *);
  280 (* FOREACH *);
  281 (* ASSIGN *);
  282 (* PLUSEQ *);
  283 (* MINUSEQ *);
  284 (* TIMESEQ *);
  285 (* DIVIDEEQ *);
  286 (* MOD *);
  287 (* MODEQ *);
  288 (* PLUS *);
  289 (* MINUS *);
  290 (* TIMES *);
  291 (* DIVIDE *);
  292 (* IS *);
  293 (* ISNT *);
  294 (* LT *);
  295 (* LEQ *);
  296 (* GT *);
  297 (* GEQ *);
  298 (* PLUSPLUS *);
  299 (* MINUSMINUS *);
  300 (* SHARP *);
  301 (* FLAT *);
  302 (* RAISE *);
  303 (* LOWER *);
  304 (* METH *);
  305 (* RETURN *);
  306 (* END *);
  307 (* SEMICOLON *);
  308 (* COMMA *);
  309 (* DOT *);
    0|]

let yytransl_block = [|
  257 (* INTLITERAL *);
  258 (* OCTAVE *);
  259 (* DURATIONINT *);
  260 (* DURATIONCONST *);
  261 (* DATATYPE *);
  262 (* NOTECONST *);
  263 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\003\000\004\000\004\000\006\000\006\000\
\007\000\005\000\005\000\008\000\008\000\008\000\008\000\008\000\
\008\000\010\000\010\000\002\000\011\000\011\000\011\000\012\000\
\012\000\012\000\012\000\012\000\012\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\013\000\
\013\000\014\000\014\000\000\000"

let yylen = "\002\000\
\000\000\002\000\002\000\008\000\000\000\001\000\001\000\003\000\
\002\000\000\000\002\000\002\000\003\000\007\000\009\000\006\000\
\008\000\000\000\006\000\003\000\000\000\003\000\005\000\001\000\
\001\000\003\000\003\000\003\000\003\000\001\000\003\000\001\000\
\004\000\006\000\003\000\004\000\009\000\009\000\005\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\002\000\
\002\000\002\000\002\000\002\000\002\000\003\000\004\000\000\000\
\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\001\000\000\000\000\000\000\000\000\000\002\000\003\000\000\000\
\000\000\020\000\000\000\000\000\000\000\000\000\000\000\007\000\
\009\000\010\000\000\000\000\000\008\000\032\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\004\000\011\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\056\000\057\000\058\000\059\000\060\000\061\000\
\012\000\000\000\000\000\000\000\000\000\000\000\000\000\021\000\
\000\000\031\000\062\000\000\000\000\000\000\000\013\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\063\000\000\000\000\000\000\000\021\000\000\000\010\000\010\000\
\000\000\000\000\000\000\000\000\000\000\039\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\
\010\000\000\000\000\000\000\000\010\000\014\000\000\000\000\000\
\024\000\025\000\000\000\000\000\023\000\000\000\000\000\017\000\
\037\000\000\000\000\000\000\000\000\000\038\000\015\000\000\000\
\000\000\000\000\028\000\029\000\010\000\000\000"

let yydgoto = "\002\000\
\003\000\006\000\007\000\014\000\020\000\015\000\016\000\031\000\
\032\000\119\000\102\000\131\000\068\000\069\000"

let yysindex = "\005\000\
\000\000\000\000\253\254\252\254\044\255\000\000\000\000\003\255\
\062\255\000\000\066\255\072\255\074\255\088\255\047\255\000\000\
\000\000\000\000\072\255\035\255\000\000\000\000\099\255\027\255\
\000\255\101\255\103\255\106\255\000\255\000\000\000\000\006\002\
\120\255\000\255\000\255\037\000\151\255\086\001\000\255\000\255\
\072\255\032\002\000\255\000\255\000\255\000\255\000\255\000\255\
\000\255\000\255\000\255\000\255\000\255\000\255\000\255\000\255\
\000\255\000\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\255\058\002\186\255\145\255\240\001\149\255\000\000\
\096\002\000\000\000\000\125\001\164\001\177\255\000\000\078\002\
\078\002\096\002\096\002\025\000\096\002\138\002\138\002\025\000\
\025\000\114\002\114\002\132\002\132\002\132\002\132\002\096\002\
\000\000\000\255\174\255\148\255\000\000\001\255\000\000\000\000\
\195\255\058\002\000\255\201\255\046\255\000\000\197\255\095\255\
\043\255\213\255\096\002\176\255\180\255\199\255\054\255\000\000\
\000\000\113\255\113\255\228\255\000\000\000\000\227\255\063\255\
\000\000\000\000\192\255\225\255\000\000\071\255\000\255\000\000\
\000\000\113\255\113\255\113\255\113\255\000\000\000\000\203\001\
\118\255\118\255\000\000\000\000\000\000\095\255"

let yyrindex = "\000\000\
\000\000\000\000\236\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\246\255\000\000\000\000\252\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\096\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\253\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\004\255\000\000\001\000\000\000\000\000\000\000\
\008\001\000\000\000\000\000\000\000\000\000\000\000\000\094\000\
\127\000\014\001\020\001\179\255\047\001\022\000\055\000\212\255\
\245\255\220\000\232\000\088\000\121\000\154\000\187\000\053\001\
\000\000\000\000\140\255\000\000\000\000\000\000\000\000\000\000\
\000\000\038\255\000\000\000\000\000\000\000\000\000\000\139\255\
\000\000\000\000\059\001\000\000\000\000\049\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\056\255\002\000\000\000\000\000\000\000\144\255"

let yygindex = "\000\000\
\000\000\000\000\000\000\000\000\169\255\000\000\020\000\000\000\
\231\255\000\000\136\000\023\000\000\000\000\000"

let yytablesize = 953
let yytable = "\038\000\
\022\000\004\000\008\000\042\000\023\000\001\000\024\000\025\000\
\067\000\070\000\073\000\110\000\066\000\076\000\077\000\112\000\
\113\000\080\000\081\000\082\000\083\000\084\000\085\000\086\000\
\087\000\088\000\089\000\090\000\091\000\092\000\093\000\094\000\
\095\000\128\000\034\000\022\000\035\000\134\000\021\000\023\000\
\096\000\024\000\025\000\022\000\005\000\038\000\067\000\023\000\
\009\000\024\000\025\000\036\000\111\000\010\000\026\000\066\000\
\117\000\027\000\028\000\022\000\078\000\150\000\026\000\022\000\
\026\000\027\000\028\000\023\000\011\000\024\000\025\000\022\000\
\106\000\012\000\125\000\023\000\013\000\024\000\025\000\037\000\
\017\000\115\000\026\000\029\000\030\000\027\000\028\000\026\000\
\026\000\067\000\026\000\029\000\120\000\027\000\028\000\022\000\
\018\000\111\000\019\000\023\000\022\000\024\000\025\000\126\000\
\030\000\033\000\030\000\127\000\039\000\144\000\040\000\029\000\
\136\000\041\000\026\000\129\000\130\000\027\000\028\000\029\000\
\143\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\029\000\
\066\000\132\000\030\000\030\000\033\000\022\000\033\000\140\000\
\141\000\023\000\100\000\024\000\025\000\074\000\101\000\018\000\
\145\000\146\000\147\000\148\000\019\000\033\000\033\000\033\000\
\033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
\033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
\033\000\033\000\033\000\049\000\018\000\049\000\033\000\033\000\
\018\000\019\000\097\000\105\000\098\000\019\000\107\000\108\000\
\137\000\114\000\116\000\118\000\049\000\049\000\049\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
\049\000\049\000\049\000\049\000\047\000\121\000\047\000\138\000\
\139\000\140\000\141\000\122\000\133\000\049\000\049\000\123\000\
\124\000\142\000\135\000\068\000\109\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\048\000\005\000\048\000\
\138\000\139\000\140\000\141\000\006\000\064\000\047\000\047\000\
\000\000\065\000\027\000\000\000\000\000\000\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\048\000\045\000\000\000\
\045\000\027\000\027\000\000\000\000\000\022\000\000\000\048\000\
\048\000\023\000\000\000\024\000\071\000\000\000\072\000\045\000\
\045\000\045\000\045\000\000\000\045\000\045\000\045\000\000\000\
\000\000\045\000\045\000\045\000\045\000\045\000\045\000\046\000\
\000\000\046\000\059\000\060\000\061\000\062\000\063\000\064\000\
\045\000\045\000\000\000\000\000\000\000\000\000\000\000\000\000\
\046\000\046\000\046\000\046\000\000\000\046\000\046\000\046\000\
\000\000\000\000\046\000\046\000\046\000\046\000\046\000\046\000\
\052\000\000\000\052\000\000\000\000\000\000\000\040\000\000\000\
\040\000\046\000\046\000\000\000\000\000\000\000\000\000\000\000\
\000\000\052\000\052\000\052\000\052\000\000\000\052\000\040\000\
\040\000\000\000\000\000\052\000\052\000\052\000\052\000\052\000\
\052\000\053\000\000\000\053\000\000\000\000\000\000\000\041\000\
\000\000\041\000\052\000\052\000\000\000\000\000\000\000\000\000\
\040\000\040\000\053\000\053\000\053\000\053\000\000\000\053\000\
\041\000\041\000\000\000\000\000\053\000\053\000\053\000\053\000\
\053\000\053\000\054\000\000\000\054\000\000\000\000\000\000\000\
\000\000\000\000\000\000\053\000\053\000\000\000\000\000\000\000\
\000\000\041\000\041\000\054\000\054\000\054\000\054\000\000\000\
\054\000\000\000\000\000\000\000\000\000\054\000\054\000\054\000\
\054\000\054\000\054\000\055\000\000\000\055\000\000\000\000\000\
\000\000\000\000\000\000\000\000\054\000\054\000\000\000\000\000\
\000\000\000\000\000\000\000\000\055\000\055\000\055\000\055\000\
\000\000\055\000\000\000\000\000\000\000\000\000\055\000\055\000\
\055\000\055\000\055\000\055\000\050\000\000\000\050\000\000\000\
\000\000\000\000\000\000\000\000\000\000\055\000\055\000\000\000\
\051\000\000\000\051\000\000\000\000\000\050\000\050\000\050\000\
\050\000\000\000\050\000\000\000\000\000\000\000\000\000\050\000\
\050\000\051\000\051\000\051\000\051\000\000\000\051\000\000\000\
\000\000\000\000\000\000\051\000\051\000\000\000\050\000\050\000\
\035\000\000\000\035\000\000\000\000\000\000\000\042\000\000\000\
\042\000\000\000\051\000\051\000\043\000\000\000\043\000\000\000\
\000\000\035\000\035\000\035\000\035\000\000\000\035\000\042\000\
\042\000\042\000\042\000\000\000\042\000\043\000\043\000\043\000\
\043\000\000\000\043\000\000\000\000\000\000\000\000\000\044\000\
\000\000\044\000\035\000\035\000\000\000\036\000\000\000\036\000\
\042\000\042\000\000\000\034\000\000\000\034\000\043\000\043\000\
\044\000\044\000\044\000\044\000\000\000\044\000\036\000\036\000\
\036\000\036\000\000\000\036\000\034\000\034\000\034\000\034\000\
\000\000\034\000\000\000\000\000\000\000\000\000\075\000\000\000\
\000\000\044\000\044\000\000\000\000\000\000\000\000\000\036\000\
\036\000\000\000\000\000\000\000\000\000\034\000\034\000\043\000\
\044\000\045\000\046\000\047\000\048\000\049\000\050\000\051\000\
\052\000\053\000\054\000\055\000\056\000\057\000\058\000\059\000\
\060\000\061\000\062\000\063\000\064\000\103\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\043\000\044\000\
\045\000\046\000\047\000\048\000\049\000\050\000\051\000\052\000\
\053\000\054\000\055\000\056\000\057\000\058\000\059\000\060\000\
\061\000\062\000\063\000\064\000\104\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\043\000\044\000\045\000\
\046\000\047\000\048\000\049\000\050\000\051\000\052\000\053\000\
\054\000\055\000\056\000\057\000\058\000\059\000\060\000\061\000\
\062\000\063\000\064\000\149\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\043\000\044\000\045\000\046\000\
\047\000\048\000\049\000\050\000\051\000\052\000\053\000\054\000\
\055\000\056\000\057\000\058\000\059\000\060\000\061\000\062\000\
\063\000\064\000\099\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\043\000\044\000\045\000\046\000\047\000\048\000\049\000\
\050\000\051\000\052\000\053\000\054\000\055\000\056\000\057\000\
\058\000\059\000\060\000\061\000\062\000\063\000\064\000\043\000\
\044\000\045\000\046\000\047\000\048\000\049\000\050\000\051\000\
\052\000\053\000\054\000\055\000\056\000\057\000\058\000\059\000\
\060\000\061\000\062\000\063\000\064\000\000\000\000\000\000\000\
\065\000\043\000\044\000\045\000\046\000\047\000\048\000\049\000\
\050\000\051\000\052\000\053\000\054\000\055\000\056\000\057\000\
\058\000\059\000\060\000\061\000\062\000\063\000\064\000\000\000\
\000\000\000\000\079\000\043\000\044\000\045\000\046\000\047\000\
\048\000\049\000\050\000\051\000\052\000\053\000\054\000\055\000\
\056\000\057\000\058\000\059\000\060\000\061\000\062\000\063\000\
\064\000\045\000\046\000\047\000\048\000\049\000\050\000\051\000\
\052\000\053\000\054\000\055\000\056\000\057\000\058\000\059\000\
\060\000\061\000\062\000\063\000\064\000\047\000\000\000\049\000\
\050\000\051\000\052\000\053\000\054\000\055\000\056\000\057\000\
\058\000\059\000\060\000\061\000\062\000\063\000\064\000\047\000\
\000\000\049\000\050\000\051\000\052\000\000\000\000\000\055\000\
\056\000\057\000\058\000\059\000\060\000\061\000\062\000\063\000\
\064\000\047\000\000\000\049\000\050\000\051\000\052\000\047\000\
\000\000\000\000\000\000\051\000\052\000\059\000\060\000\061\000\
\062\000\063\000\064\000\059\000\060\000\061\000\062\000\063\000\
\064\000"

let yycheck = "\025\000\
\001\001\005\001\007\001\029\000\005\001\001\000\007\001\008\001\
\034\000\035\000\036\000\011\001\009\001\039\000\040\000\103\000\
\104\000\043\000\044\000\045\000\046\000\047\000\048\000\049\000\
\050\000\051\000\052\000\053\000\054\000\055\000\056\000\057\000\
\058\000\121\000\008\001\001\001\010\001\125\000\019\000\005\001\
\066\000\007\001\008\001\001\001\048\001\071\000\009\001\005\001\
\005\001\007\001\008\001\025\001\052\001\051\001\020\001\052\001\
\011\001\023\001\024\001\011\001\041\000\149\000\020\001\001\001\
\009\001\023\001\024\001\005\001\007\001\007\001\008\001\001\001\
\098\000\008\001\021\001\005\001\005\001\007\001\008\001\053\001\
\007\001\107\000\020\001\049\001\050\001\023\001\024\001\032\001\
\033\001\052\001\020\001\049\001\050\001\023\001\024\001\001\001\
\009\001\052\001\052\001\005\001\052\001\007\001\008\001\050\001\
\009\001\007\001\011\001\054\001\008\001\135\000\008\001\049\001\
\050\001\008\001\020\001\003\001\004\001\023\001\024\001\049\001\
\050\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\049\001\
\025\001\123\000\051\001\052\001\009\001\001\001\011\001\034\001\
\035\001\005\001\006\001\007\001\008\001\007\001\010\001\021\001\
\138\000\139\000\140\000\141\000\021\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\009\001\050\001\011\001\051\001\052\001\
\054\001\050\001\009\001\019\001\052\001\054\001\025\001\052\001\
\009\001\007\001\002\001\007\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\009\001\009\001\011\001\032\001\
\033\001\034\001\035\001\052\001\001\001\051\001\052\001\052\001\
\034\001\009\001\008\001\000\000\101\000\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\009\001\009\001\011\001\
\032\001\033\001\034\001\035\001\009\001\009\001\051\001\052\001\
\255\255\009\001\009\001\255\255\255\255\255\255\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\009\001\255\255\
\011\001\032\001\033\001\255\255\255\255\001\001\255\255\051\001\
\052\001\005\001\255\255\007\001\008\001\255\255\010\001\026\001\
\027\001\028\001\029\001\255\255\031\001\032\001\033\001\255\255\
\255\255\036\001\037\001\038\001\039\001\040\001\041\001\009\001\
\255\255\011\001\042\001\043\001\044\001\045\001\046\001\047\001\
\051\001\052\001\255\255\255\255\255\255\255\255\255\255\255\255\
\026\001\027\001\028\001\029\001\255\255\031\001\032\001\033\001\
\255\255\255\255\036\001\037\001\038\001\039\001\040\001\041\001\
\009\001\255\255\011\001\255\255\255\255\255\255\009\001\255\255\
\011\001\051\001\052\001\255\255\255\255\255\255\255\255\255\255\
\255\255\026\001\027\001\028\001\029\001\255\255\031\001\026\001\
\027\001\255\255\255\255\036\001\037\001\038\001\039\001\040\001\
\041\001\009\001\255\255\011\001\255\255\255\255\255\255\009\001\
\255\255\011\001\051\001\052\001\255\255\255\255\255\255\255\255\
\051\001\052\001\026\001\027\001\028\001\029\001\255\255\031\001\
\026\001\027\001\255\255\255\255\036\001\037\001\038\001\039\001\
\040\001\041\001\009\001\255\255\011\001\255\255\255\255\255\255\
\255\255\255\255\255\255\051\001\052\001\255\255\255\255\255\255\
\255\255\051\001\052\001\026\001\027\001\028\001\029\001\255\255\
\031\001\255\255\255\255\255\255\255\255\036\001\037\001\038\001\
\039\001\040\001\041\001\009\001\255\255\011\001\255\255\255\255\
\255\255\255\255\255\255\255\255\051\001\052\001\255\255\255\255\
\255\255\255\255\255\255\255\255\026\001\027\001\028\001\029\001\
\255\255\031\001\255\255\255\255\255\255\255\255\036\001\037\001\
\038\001\039\001\040\001\041\001\009\001\255\255\011\001\255\255\
\255\255\255\255\255\255\255\255\255\255\051\001\052\001\255\255\
\009\001\255\255\011\001\255\255\255\255\026\001\027\001\028\001\
\029\001\255\255\031\001\255\255\255\255\255\255\255\255\036\001\
\037\001\026\001\027\001\028\001\029\001\255\255\031\001\255\255\
\255\255\255\255\255\255\036\001\037\001\255\255\051\001\052\001\
\009\001\255\255\011\001\255\255\255\255\255\255\009\001\255\255\
\011\001\255\255\051\001\052\001\009\001\255\255\011\001\255\255\
\255\255\026\001\027\001\028\001\029\001\255\255\031\001\026\001\
\027\001\028\001\029\001\255\255\031\001\026\001\027\001\028\001\
\029\001\255\255\031\001\255\255\255\255\255\255\255\255\009\001\
\255\255\011\001\051\001\052\001\255\255\009\001\255\255\011\001\
\051\001\052\001\255\255\009\001\255\255\011\001\051\001\052\001\
\026\001\027\001\028\001\029\001\255\255\031\001\026\001\027\001\
\028\001\029\001\255\255\031\001\026\001\027\001\028\001\029\001\
\255\255\031\001\255\255\255\255\255\255\255\255\009\001\255\255\
\255\255\051\001\052\001\255\255\255\255\255\255\255\255\051\001\
\052\001\255\255\255\255\255\255\255\255\051\001\052\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\009\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\009\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\009\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\011\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\255\255\255\255\255\255\
\051\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\255\255\
\255\255\255\255\051\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\030\001\255\255\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\030\001\
\255\255\032\001\033\001\034\001\035\001\255\255\255\255\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\030\001\255\255\032\001\033\001\034\001\035\001\030\001\
\255\255\255\255\255\255\034\001\035\001\042\001\043\001\044\001\
\045\001\046\001\047\001\042\001\043\001\044\001\045\001\046\001\
\047\001"

let yynames_const = "\
  LEFTPAREN\000\
  RIGHTPAREN\000\
  LBRAC\000\
  RBRAC\000\
  INT\000\
  NOTE\000\
  CHORD\000\
  SCALE\000\
  STANZA\000\
  SCORE\000\
  BOOL\000\
  IN\000\
  IF\000\
  ELSE\000\
  NOELSE\000\
  WHILE\000\
  FOREACH\000\
  ASSIGN\000\
  PLUSEQ\000\
  MINUSEQ\000\
  TIMESEQ\000\
  DIVIDEEQ\000\
  MOD\000\
  MODEQ\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  IS\000\
  ISNT\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  PLUSPLUS\000\
  MINUSMINUS\000\
  SHARP\000\
  FLAT\000\
  RAISE\000\
  LOWER\000\
  METH\000\
  RETURN\000\
  END\000\
  SEMICOLON\000\
  COMMA\000\
  DOT\000\
  "

let yynames_block = "\
  INTLITERAL\000\
  OCTAVE\000\
  DURATIONINT\000\
  DURATIONCONST\000\
  DATATYPE\000\
  NOTECONST\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 70 "parser.mly"
( [], [] )
# 523 "parser.ml"
               : Ast_tmp.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast_tmp.program) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 71 "parser.mly"
                ( (_2 :: fst _1), snd _1 )
# 531 "parser.ml"
               : Ast_tmp.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast_tmp.program) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'methdecl) in
    Obj.repr(
# 72 "parser.mly"
                   ( TODO() )
# 539 "parser.ml"
               : Ast_tmp.program))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'meth_params) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 75 "parser.mly"
                                                                      ( create() )
# 549 "parser.ml"
               : 'methdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 78 "parser.mly"
 ( [] )
# 555 "parser.ml"
               : 'meth_params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param_list) in
    Obj.repr(
# 79 "parser.mly"
              ( List.rev(_1) )
# 562 "parser.ml"
               : 'meth_params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param_decl) in
    Obj.repr(
# 82 "parser.mly"
            ( [_1] )
# 569 "parser.ml"
               : 'param_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'param_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'param_decl) in
    Obj.repr(
# 83 "parser.mly"
                               ( _3 :: _1 )
# 577 "parser.ml"
               : 'param_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 86 "parser.mly"
             ( TODO() )
# 585 "parser.ml"
               : 'param_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 89 "parser.mly"
 ( [] )
# 591 "parser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 90 "parser.mly"
                            ( _2 :: _1 )
# 599 "parser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 93 "parser.mly"
                ( TODO() )
# 606 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 94 "parser.mly"
                         ( Return(_2) )
# 613 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'statement_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'elsif_statement) in
    Obj.repr(
# 95 "parser.mly"
                                                                                ( TODO() )
# 622 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'statement_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'elsif_statement) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 96 "parser.mly"
                                                                                       ( TODO() )
# 632 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 97 "parser.mly"
                                                      ( TODO() )
# 640 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'param_decl) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 98 "parser.mly"
                                                                    (TODO())
# 649 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 101 "parser.mly"
                    ( [] )
# 655 "parser.ml"
               : 'elsif_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'elsif_statement) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'statement_list) in
    Obj.repr(
# 102 "parser.mly"
                                                                  ( TODO() )
# 664 "parser.ml"
               : 'elsif_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 105 "parser.mly"
                       ({ vartype = _1; varname = _2})
# 672 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 108 "parser.mly"
 ( [%1] )
# 678 "parser.ml"
               : 'generic_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'generic_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 109 "parser.mly"
                         ( _3 :: _1 )
# 686 "parser.ml"
               : 'generic_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'generic_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 110 "parser.mly"
                                          ( TODO() )
# 695 "parser.ml"
               : 'generic_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 113 "parser.mly"
             ( _1 )
# 702 "parser.ml"
               : 'duration_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 114 "parser.mly"
                 ( _1 )
# 709 "parser.ml"
               : 'duration_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'duration_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'duration_expr) in
    Obj.repr(
# 115 "parser.mly"
                                    ( Binop(_1, Add, _3)  )
# 717 "parser.ml"
               : 'duration_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'duration_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'duration_expr) in
    Obj.repr(
# 116 "parser.mly"
                                     ( Binop(_1, Sub, _3)  )
# 725 "parser.ml"
               : 'duration_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'duration_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'duration_expr) in
    Obj.repr(
# 117 "parser.mly"
                                     ( Binop(_1, Mult, _3)  )
# 733 "parser.ml"
               : 'duration_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'duration_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'duration_expr) in
    Obj.repr(
# 118 "parser.mly"
                                      ( Binop(_1, Div, _3)  )
# 741 "parser.ml"
               : 'duration_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 121 "parser.mly"
    ( Id(_1) )
# 748 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 122 "parser.mly"
             ( TODO() )
# 756 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 123 "parser.mly"
              ( TODO() )
# 763 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
                       ( ElemOp(_1, _3) )
# 771 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                                   ( LElemOp(_1, _3, _6) )
# 780 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                  ( TODO() )
# 788 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
                           ( TODO() )
# 797 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'duration_expr) in
    Obj.repr(
# 128 "parser.mly"
                                                                              ( TODO() )
# 807 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'generic_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'duration_expr) in
    Obj.repr(
# 129 "parser.mly"
                                                                                 ( TODO() )
# 816 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'generic_list) in
    Obj.repr(
# 130 "parser.mly"
                                      ( TODO() )
# 824 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 131 "parser.mly"
                    ( Assign(_1, BinOp(_1, Add, _3)) )
# 832 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                     ( Assign(_1, BinOp(_1, Sub, _3)) )
# 840 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 133 "parser.mly"
                     ( Assign(_1, BinOp(_1, Mult, _3)) )
# 848 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 134 "parser.mly"
                      ( Assign(_1, BinOp(_1, Div, _3)) )
# 856 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 135 "parser.mly"
                   ( Assign(_1, BinOp(_1, Mod, _3)) )
# 864 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 136 "parser.mly"
                  ( BinOp(_1, Add, _3) )
# 872 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 137 "parser.mly"
                   ( BinOp(_1, Sub, _3) )
# 880 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 138 "parser.mly"
                   ( BinOp(_1, Mult, _3) )
# 888 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 139 "parser.mly"
                    ( BinOp(_1, Div, _3) )
# 896 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 140 "parser.mly"
                 ( BinOp(_1, Mod, _3) )
# 904 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 141 "parser.mly"
                ( BinOp(_1, Eq, _3) )
# 912 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 142 "parser.mly"
                  ( BinOp(_1, NEq, _3) )
# 920 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 143 "parser.mly"
                ( BinOp(_1, Less, _3) )
# 928 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 144 "parser.mly"
                 ( BinOp(_1, LEq, _3) )
# 936 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 145 "parser.mly"
                ( BinOp(_1, Greater, _3) )
# 944 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 146 "parser.mly"
                 ( BinOp(_1, GEq, _3) )
# 952 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 147 "parser.mly"
                 ( Assign(_1, BinOp(_1, Add, IntLiteral(1))) )
# 959 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 148 "parser.mly"
                   ( Assign(_1, BinOp(_1, Sub, IntLiteral(1))) )
# 966 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 149 "parser.mly"
              ( TODO() )
# 973 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 150 "parser.mly"
             ( TODO() )
# 980 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 151 "parser.mly"
              ( TODO() )
# 987 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 152 "parser.mly"
              ( TODO() )
# 994 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 153 "parser.mly"
                             ( _2 )
# 1001 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 154 "parser.mly"
                                       ( TODO() )
# 1009 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 157 "parser.mly"
 ( [] )
# 1015 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 158 "parser.mly"
                ( List.rev _1 )
# 1022 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 161 "parser.mly"
      ( [_1] )
# 1029 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 162 "parser.mly"
                           ( _3 :: _1 )
# 1037 "parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast_tmp.program)
