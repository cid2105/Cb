type token =
  | INTLITERAL of (int)
  | DURATIONCONST of (string)
  | NOTECONST of (string)
  | BOOLLITERAL of (bool)
  | ID of (string)
  | LEFTPAREN
  | RIGHTPAREN
  | LBRAC
  | RBRAC
  | EOF
  | INT
  | NOTE
  | CHORD
  | SCALE
  | STANZA
  | SCORE
  | VOID
  | BOOL
  | IN
  | IF
  | ELSE
  | NOELSE
  | ELSIF
  | WHILE
  | FOREACH
  | ASSIGN
  | PLUSEQ
  | MINUSEQ
  | TIMESEQ
  | DIVIDEEQ
  | MOD
  | AND
  | OR
  | MODEQ
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | IS
  | ISNT
  | LT
  | LEQ
  | GT
  | GEQ
  | PLUSPLUS
  | MINUSMINUS
  | RAISE
  | LOWER
  | METH
  | RETURN
  | END
  | SEMICOLON
  | COMMA
  | DOT

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 62 "parser.ml"
let yytransl_const = [|
  262 (* LEFTPAREN *);
  263 (* RIGHTPAREN *);
  264 (* LBRAC *);
  265 (* RBRAC *);
    0 (* EOF *);
  266 (* INT *);
  267 (* NOTE *);
  268 (* CHORD *);
  269 (* SCALE *);
  270 (* STANZA *);
  271 (* SCORE *);
  272 (* VOID *);
  273 (* BOOL *);
  274 (* IN *);
  275 (* IF *);
  276 (* ELSE *);
  277 (* NOELSE *);
  278 (* ELSIF *);
  279 (* WHILE *);
  280 (* FOREACH *);
  281 (* ASSIGN *);
  282 (* PLUSEQ *);
  283 (* MINUSEQ *);
  284 (* TIMESEQ *);
  285 (* DIVIDEEQ *);
  286 (* MOD *);
  287 (* AND *);
  288 (* OR *);
  289 (* MODEQ *);
  290 (* PLUS *);
  291 (* MINUS *);
  292 (* TIMES *);
  293 (* DIVIDE *);
  294 (* IS *);
  295 (* ISNT *);
  296 (* LT *);
  297 (* LEQ *);
  298 (* GT *);
  299 (* GEQ *);
  300 (* PLUSPLUS *);
  301 (* MINUSMINUS *);
  302 (* RAISE *);
  303 (* LOWER *);
  304 (* METH *);
  305 (* RETURN *);
  306 (* END *);
  307 (* SEMICOLON *);
  308 (* COMMA *);
  309 (* DOT *);
    0|]

let yytransl_block = [|
  257 (* INTLITERAL *);
  258 (* DURATIONCONST *);
  259 (* NOTECONST *);
  260 (* BOOLLITERAL *);
  261 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\003\000\003\000\004\000\004\000\004\000\002\000\
\002\000\002\000\002\000\005\000\006\000\008\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\011\000\011\000\
\012\000\012\000\013\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\015\000\015\000\016\000\016\000\016\000\017\000\
\017\000\014\000\014\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\018\000\018\000\019\000\019\000\
\000\000"

let yylen = "\002\000\
\000\000\002\000\000\000\002\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\003\000\005\000\008\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\000\000\001\000\
\001\000\003\000\002\000\002\000\003\000\003\000\007\000\009\000\
\006\000\008\000\000\000\005\000\001\000\001\000\001\000\001\000\
\003\000\000\000\001\000\001\000\003\000\001\000\001\000\001\000\
\007\000\007\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\002\000\002\000\
\002\000\002\000\003\000\004\000\000\000\001\000\001\000\003\000\
\002\000"

let yydefred = "\000\000\
\001\000\000\000\000\000\046\000\047\000\048\000\000\000\000\000\
\003\000\000\000\015\000\016\000\017\000\018\000\020\000\021\000\
\022\000\019\000\000\000\000\000\000\000\000\000\000\000\002\000\
\008\000\009\000\011\000\010\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\071\000\072\000\073\000\074\000\028\000\000\000\000\000\000\000\
\045\000\000\000\000\000\075\000\030\000\004\000\005\000\006\000\
\007\000\051\000\000\000\000\000\000\000\000\000\000\000\000\000\
\029\000\000\000\012\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\076\000\000\000\
\000\000\000\000\000\000\003\000\003\000\027\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\025\000\013\000\037\000\039\000\038\000\000\000\000\000\
\000\000\000\000\033\000\003\000\003\000\000\000\049\000\050\000\
\000\000\003\000\031\000\000\000\000\000\026\000\000\000\000\000\
\034\000\014\000\003\000\032\000\000\000"

let yydgoto = "\002\000\
\003\000\024\000\036\000\078\000\079\000\080\000\081\000\028\000\
\029\000\030\000\128\000\129\000\087\000\044\000\138\000\135\000\
\038\000\071\000\072\000"

let yysindex = "\003\000\
\000\000\000\000\216\255\000\000\000\000\000\000\004\255\130\000\
\000\000\167\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\002\255\003\255\005\255\080\000\167\000\000\000\
\000\000\000\000\000\000\000\000\012\255\029\003\167\000\013\255\
\223\254\167\000\029\002\057\255\083\003\025\255\167\000\167\000\
\080\000\016\255\083\003\227\254\234\254\167\000\167\000\167\000\
\167\000\167\000\167\000\167\000\167\000\167\000\167\000\167\000\
\167\000\167\000\167\000\167\000\167\000\167\000\167\000\167\000\
\000\000\000\000\000\000\000\000\000\000\083\003\017\255\229\254\
\000\000\167\000\027\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\167\000\070\002\111\002\022\255\065\255\024\255\
\000\000\167\000\000\000\129\003\106\003\106\003\129\003\129\003\
\250\255\013\000\147\003\129\003\056\255\056\255\250\255\250\255\
\165\003\165\003\003\002\003\002\003\002\003\002\000\000\167\000\
\001\003\033\255\083\003\000\000\000\000\000\000\083\255\080\000\
\056\003\083\003\011\255\011\255\244\255\112\255\087\255\089\255\
\038\255\000\000\000\000\000\000\000\000\000\000\090\255\091\255\
\099\255\241\254\000\000\000\000\000\000\080\000\000\000\000\000\
\167\000\000\000\000\000\140\255\164\255\000\000\152\002\192\255\
\000\000\000\000\000\000\000\000\012\000"

let yyrindex = "\000\000\
\000\000\000\000\110\000\000\000\000\000\000\000\037\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\060\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\105\255\000\000\
\193\002\000\000\000\000\000\000\078\255\000\000\000\000\000\000\
\000\000\000\000\081\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\007\255\000\000\132\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\211\001\082\255\216\001\221\001\248\001\
\078\000\175\001\184\001\001\002\189\000\226\000\115\000\152\000\
\119\001\147\001\007\001\035\001\063\001\091\001\000\000\000\000\
\000\000\234\002\086\255\000\000\000\000\000\000\000\000\133\255\
\000\000\026\255\000\000\000\000\243\254\000\000\000\000\000\000\
\135\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\064\255"

let yygindex = "\000\000\
\000\000\000\000\022\002\000\000\146\000\155\000\157\000\000\000\
\235\255\248\255\000\000\000\000\142\255\000\000\000\000\042\000\
\139\000\000\000\000\000"

let yytablesize = 1236
let yytable = "\035\000\
\042\000\037\000\090\000\001\000\146\000\130\000\035\000\039\000\
\040\000\031\000\041\000\132\000\133\000\079\000\043\000\134\000\
\045\000\073\000\074\000\086\000\088\000\089\000\070\000\111\000\
\112\000\037\000\118\000\150\000\091\000\120\000\084\000\085\000\
\080\000\082\000\147\000\114\000\035\000\092\000\093\000\094\000\
\095\000\096\000\097\000\098\000\099\000\100\000\101\000\102\000\
\103\000\104\000\105\000\106\000\107\000\108\000\109\000\110\000\
\032\000\004\000\079\000\005\000\006\000\007\000\008\000\009\000\
\010\000\113\000\011\000\012\000\013\000\014\000\015\000\016\000\
\017\000\018\000\115\000\019\000\083\000\080\000\083\000\020\000\
\021\000\121\000\119\000\036\000\124\000\051\000\040\000\127\000\
\053\000\142\000\053\000\057\000\058\000\140\000\041\000\141\000\
\143\000\144\000\086\000\065\000\066\000\067\000\068\000\122\000\
\145\000\023\000\077\000\053\000\053\000\081\000\042\000\077\000\
\004\000\036\000\005\000\006\000\007\000\008\000\009\000\010\000\
\086\000\011\000\012\000\013\000\014\000\015\000\016\000\017\000\
\018\000\040\000\019\000\043\000\053\000\053\000\020\000\021\000\
\151\000\041\000\078\000\023\000\004\000\024\000\005\000\006\000\
\007\000\008\000\009\000\010\000\025\000\011\000\012\000\013\000\
\014\000\015\000\016\000\017\000\018\000\026\000\019\000\027\000\
\023\000\139\000\020\000\021\000\004\000\136\000\005\000\006\000\
\007\000\008\000\009\000\010\000\075\000\011\000\012\000\013\000\
\014\000\015\000\016\000\017\000\018\000\000\000\019\000\000\000\
\000\000\000\000\020\000\021\000\023\000\153\000\000\000\000\000\
\004\000\000\000\005\000\006\000\007\000\008\000\009\000\010\000\
\000\000\011\000\012\000\013\000\014\000\015\000\016\000\017\000\
\018\000\000\000\019\000\000\000\023\000\154\000\020\000\021\000\
\004\000\000\000\005\000\006\000\007\000\008\000\009\000\010\000\
\000\000\011\000\012\000\013\000\014\000\015\000\016\000\017\000\
\018\000\000\000\019\000\000\000\000\000\000\000\020\000\021\000\
\023\000\156\000\000\000\000\000\004\000\000\000\005\000\006\000\
\007\000\008\000\009\000\010\000\000\000\011\000\012\000\013\000\
\014\000\015\000\016\000\017\000\018\000\000\000\019\000\022\000\
\023\000\137\000\020\000\021\000\004\000\000\000\005\000\006\000\
\007\000\008\000\009\000\010\000\000\000\011\000\012\000\013\000\
\014\000\015\000\016\000\017\000\018\000\000\000\019\000\000\000\
\000\000\000\000\020\000\021\000\023\000\065\000\066\000\067\000\
\068\000\000\000\051\000\044\000\000\000\044\000\055\000\056\000\
\057\000\058\000\059\000\060\000\061\000\062\000\063\000\064\000\
\065\000\066\000\067\000\068\000\023\000\044\000\044\000\044\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\044\000\044\000\044\000\062\000\000\000\062\000\044\000\
\044\000\011\000\012\000\013\000\014\000\015\000\016\000\017\000\
\018\000\000\000\000\000\000\000\000\000\000\000\062\000\062\000\
\062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
\062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
\062\000\060\000\000\000\060\000\000\000\000\000\000\000\000\000\
\062\000\062\000\004\000\000\000\033\000\006\000\007\000\008\000\
\000\000\034\000\000\000\060\000\060\000\060\000\060\000\060\000\
\060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
\060\000\060\000\060\000\060\000\060\000\060\000\061\000\000\000\
\061\000\000\000\000\000\000\000\000\000\060\000\060\000\004\000\
\000\000\005\000\006\000\007\000\008\000\000\000\010\000\000\000\
\061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
\061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
\061\000\061\000\061\000\058\000\000\000\058\000\000\000\000\000\
\000\000\000\000\061\000\061\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\058\000\058\000\058\000\
\058\000\058\000\000\000\058\000\058\000\058\000\058\000\058\000\
\000\000\000\000\058\000\058\000\058\000\058\000\058\000\058\000\
\059\000\000\000\059\000\000\000\000\000\000\000\000\000\058\000\
\058\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\059\000\059\000\059\000\059\000\059\000\000\000\
\059\000\059\000\059\000\059\000\059\000\000\000\000\000\059\000\
\059\000\059\000\059\000\059\000\059\000\067\000\000\000\067\000\
\000\000\000\000\000\000\000\000\059\000\059\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\067\000\
\067\000\067\000\067\000\067\000\000\000\067\000\067\000\067\000\
\000\000\068\000\000\000\068\000\067\000\067\000\067\000\067\000\
\067\000\067\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\067\000\067\000\068\000\068\000\068\000\068\000\068\000\
\000\000\068\000\068\000\068\000\000\000\069\000\000\000\069\000\
\068\000\068\000\068\000\068\000\068\000\068\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\068\000\068\000\069\000\
\069\000\069\000\069\000\069\000\000\000\069\000\069\000\069\000\
\000\000\070\000\000\000\070\000\069\000\069\000\069\000\069\000\
\069\000\069\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\069\000\069\000\070\000\070\000\070\000\070\000\070\000\
\000\000\070\000\070\000\070\000\000\000\065\000\000\000\065\000\
\070\000\070\000\070\000\070\000\070\000\070\000\000\000\000\000\
\000\000\125\000\126\000\000\000\000\000\070\000\070\000\065\000\
\065\000\065\000\065\000\065\000\000\000\065\000\065\000\065\000\
\000\000\066\000\000\000\066\000\065\000\065\000\000\000\000\000\
\000\000\148\000\149\000\000\000\000\000\000\000\000\000\152\000\
\000\000\065\000\065\000\066\000\066\000\066\000\066\000\066\000\
\157\000\066\000\066\000\066\000\000\000\063\000\000\000\063\000\
\066\000\066\000\000\000\000\000\000\000\000\000\064\000\000\000\
\064\000\000\000\000\000\000\000\000\000\066\000\066\000\063\000\
\063\000\063\000\063\000\063\000\000\000\063\000\063\000\063\000\
\064\000\064\000\064\000\064\000\064\000\000\000\000\000\064\000\
\064\000\052\000\000\000\052\000\000\000\000\000\054\000\000\000\
\054\000\063\000\063\000\055\000\000\000\055\000\000\000\000\000\
\000\000\000\000\064\000\064\000\052\000\052\000\052\000\052\000\
\000\000\054\000\054\000\052\000\000\000\000\000\055\000\055\000\
\055\000\055\000\000\000\000\000\000\000\055\000\056\000\000\000\
\056\000\000\000\000\000\000\000\000\000\052\000\052\000\057\000\
\000\000\057\000\054\000\054\000\000\000\000\000\000\000\055\000\
\055\000\056\000\056\000\056\000\056\000\000\000\000\000\000\000\
\056\000\000\000\057\000\057\000\057\000\057\000\000\000\000\000\
\051\000\057\000\000\000\076\000\055\000\056\000\057\000\058\000\
\000\000\000\000\056\000\056\000\000\000\000\000\065\000\066\000\
\067\000\068\000\000\000\057\000\057\000\046\000\047\000\048\000\
\049\000\050\000\051\000\052\000\053\000\054\000\055\000\056\000\
\057\000\058\000\059\000\060\000\061\000\062\000\063\000\064\000\
\065\000\066\000\067\000\068\000\116\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\046\000\047\000\
\048\000\049\000\050\000\051\000\052\000\053\000\054\000\055\000\
\056\000\057\000\058\000\059\000\060\000\061\000\062\000\063\000\
\064\000\065\000\066\000\067\000\068\000\117\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\046\000\
\047\000\048\000\049\000\050\000\051\000\052\000\053\000\054\000\
\055\000\056\000\057\000\058\000\059\000\060\000\061\000\062\000\
\063\000\064\000\065\000\066\000\067\000\068\000\155\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\046\000\047\000\048\000\049\000\050\000\051\000\052\000\053\000\
\054\000\055\000\056\000\057\000\058\000\059\000\060\000\061\000\
\062\000\063\000\064\000\065\000\066\000\067\000\068\000\047\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\051\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\051\000\051\000\051\000\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
\051\000\046\000\047\000\048\000\049\000\050\000\051\000\052\000\
\053\000\054\000\055\000\056\000\057\000\058\000\059\000\060\000\
\061\000\062\000\063\000\064\000\065\000\066\000\067\000\068\000\
\000\000\000\000\000\000\000\000\123\000\046\000\047\000\048\000\
\049\000\050\000\051\000\052\000\053\000\054\000\055\000\056\000\
\057\000\058\000\059\000\060\000\061\000\062\000\063\000\064\000\
\065\000\066\000\067\000\068\000\000\000\000\000\000\000\069\000\
\046\000\047\000\048\000\049\000\050\000\051\000\052\000\053\000\
\054\000\055\000\056\000\057\000\058\000\059\000\060\000\061\000\
\062\000\063\000\064\000\065\000\066\000\067\000\068\000\000\000\
\000\000\000\000\131\000\046\000\047\000\048\000\049\000\050\000\
\051\000\052\000\053\000\054\000\055\000\056\000\057\000\058\000\
\059\000\060\000\061\000\062\000\063\000\064\000\065\000\066\000\
\067\000\068\000\046\000\000\000\000\000\049\000\050\000\051\000\
\052\000\053\000\054\000\055\000\056\000\057\000\058\000\059\000\
\060\000\061\000\062\000\063\000\064\000\065\000\066\000\067\000\
\068\000\046\000\000\000\000\000\000\000\000\000\051\000\052\000\
\053\000\000\000\055\000\056\000\057\000\058\000\059\000\060\000\
\061\000\062\000\063\000\064\000\065\000\066\000\067\000\068\000\
\051\000\052\000\000\000\000\000\055\000\056\000\057\000\058\000\
\059\000\060\000\061\000\062\000\063\000\064\000\065\000\066\000\
\067\000\068\000\051\000\000\000\000\000\000\000\055\000\056\000\
\057\000\058\000\000\000\000\000\061\000\062\000\063\000\064\000\
\065\000\066\000\067\000\068\000"

let yycheck = "\008\000\
\022\000\010\000\025\001\001\000\020\001\120\000\020\001\006\001\
\006\001\006\001\006\001\001\001\002\001\007\001\023\000\005\001\
\005\001\005\001\052\001\041\000\005\001\051\001\031\000\007\001\
\052\001\034\000\005\001\142\000\051\001\006\001\039\000\040\000\
\007\001\009\001\050\001\009\001\050\001\046\000\047\000\048\000\
\049\000\050\000\051\000\052\000\053\000\054\000\055\000\056\000\
\057\000\058\000\059\000\060\000\061\000\062\000\063\000\064\000\
\053\001\001\001\052\001\003\001\004\001\005\001\006\001\007\001\
\008\001\074\000\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\083\000\019\001\052\001\052\001\052\001\023\001\
\024\001\090\000\018\001\020\001\052\001\030\001\009\001\005\001\
\007\001\052\001\009\001\036\001\037\001\007\001\009\001\007\001\
\007\001\007\001\120\000\044\001\045\001\046\001\047\001\112\000\
\006\001\049\001\050\001\026\001\027\001\000\000\051\001\007\001\
\001\001\050\001\003\001\004\001\005\001\006\001\007\001\008\001\
\142\000\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\052\001\019\001\051\001\051\001\052\001\023\001\024\001\
\145\000\052\001\007\001\007\001\001\001\007\001\003\001\004\001\
\005\001\006\001\007\001\008\001\003\000\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\003\000\019\001\003\000\
\049\001\050\001\023\001\024\001\001\001\124\000\003\001\004\001\
\005\001\006\001\007\001\008\001\034\000\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\019\001\255\255\
\255\255\255\255\023\001\024\001\049\001\050\001\255\255\255\255\
\001\001\255\255\003\001\004\001\005\001\006\001\007\001\008\001\
\255\255\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\255\255\019\001\255\255\049\001\050\001\023\001\024\001\
\001\001\255\255\003\001\004\001\005\001\006\001\007\001\008\001\
\255\255\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\255\255\019\001\255\255\255\255\255\255\023\001\024\001\
\049\001\050\001\255\255\255\255\001\001\255\255\003\001\004\001\
\005\001\006\001\007\001\008\001\255\255\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\019\001\048\001\
\049\001\022\001\023\001\024\001\001\001\255\255\003\001\004\001\
\005\001\006\001\007\001\008\001\255\255\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\019\001\255\255\
\255\255\255\255\023\001\024\001\049\001\044\001\045\001\046\001\
\047\001\255\255\030\001\007\001\255\255\009\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\049\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\007\001\255\255\009\001\051\001\
\052\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\255\255\255\255\255\255\255\255\255\255\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\007\001\255\255\009\001\255\255\255\255\255\255\255\255\
\051\001\052\001\001\001\255\255\003\001\004\001\005\001\006\001\
\255\255\008\001\255\255\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\007\001\255\255\
\009\001\255\255\255\255\255\255\255\255\051\001\052\001\001\001\
\255\255\003\001\004\001\005\001\006\001\255\255\008\001\255\255\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\007\001\255\255\009\001\255\255\255\255\
\255\255\255\255\051\001\052\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\025\001\026\001\027\001\
\028\001\029\001\255\255\031\001\032\001\033\001\034\001\035\001\
\255\255\255\255\038\001\039\001\040\001\041\001\042\001\043\001\
\007\001\255\255\009\001\255\255\255\255\255\255\255\255\051\001\
\052\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\025\001\026\001\027\001\028\001\029\001\255\255\
\031\001\032\001\033\001\034\001\035\001\255\255\255\255\038\001\
\039\001\040\001\041\001\042\001\043\001\007\001\255\255\009\001\
\255\255\255\255\255\255\255\255\051\001\052\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\025\001\
\026\001\027\001\028\001\029\001\255\255\031\001\032\001\033\001\
\255\255\007\001\255\255\009\001\038\001\039\001\040\001\041\001\
\042\001\043\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\051\001\052\001\025\001\026\001\027\001\028\001\029\001\
\255\255\031\001\032\001\033\001\255\255\007\001\255\255\009\001\
\038\001\039\001\040\001\041\001\042\001\043\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\051\001\052\001\025\001\
\026\001\027\001\028\001\029\001\255\255\031\001\032\001\033\001\
\255\255\007\001\255\255\009\001\038\001\039\001\040\001\041\001\
\042\001\043\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\051\001\052\001\025\001\026\001\027\001\028\001\029\001\
\255\255\031\001\032\001\033\001\255\255\007\001\255\255\009\001\
\038\001\039\001\040\001\041\001\042\001\043\001\255\255\255\255\
\255\255\116\000\117\000\255\255\255\255\051\001\052\001\025\001\
\026\001\027\001\028\001\029\001\255\255\031\001\032\001\033\001\
\255\255\007\001\255\255\009\001\038\001\039\001\255\255\255\255\
\255\255\140\000\141\000\255\255\255\255\255\255\255\255\146\000\
\255\255\051\001\052\001\025\001\026\001\027\001\028\001\029\001\
\155\000\031\001\032\001\033\001\255\255\007\001\255\255\009\001\
\038\001\039\001\255\255\255\255\255\255\255\255\007\001\255\255\
\009\001\255\255\255\255\255\255\255\255\051\001\052\001\025\001\
\026\001\027\001\028\001\029\001\255\255\031\001\032\001\033\001\
\025\001\026\001\027\001\028\001\029\001\255\255\255\255\032\001\
\033\001\007\001\255\255\009\001\255\255\255\255\007\001\255\255\
\009\001\051\001\052\001\007\001\255\255\009\001\255\255\255\255\
\255\255\255\255\051\001\052\001\026\001\027\001\028\001\029\001\
\255\255\026\001\027\001\033\001\255\255\255\255\026\001\027\001\
\028\001\029\001\255\255\255\255\255\255\033\001\007\001\255\255\
\009\001\255\255\255\255\255\255\255\255\051\001\052\001\007\001\
\255\255\009\001\051\001\052\001\255\255\255\255\255\255\051\001\
\052\001\026\001\027\001\028\001\029\001\255\255\255\255\255\255\
\033\001\255\255\026\001\027\001\028\001\029\001\255\255\255\255\
\030\001\033\001\255\255\007\001\034\001\035\001\036\001\037\001\
\255\255\255\255\051\001\052\001\255\255\255\255\044\001\045\001\
\046\001\047\001\255\255\051\001\052\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\007\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\007\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\007\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\007\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\007\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\255\255\255\255\255\255\255\255\052\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\255\255\255\255\255\255\051\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\255\255\
\255\255\255\255\051\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\025\001\255\255\255\255\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\025\001\255\255\255\255\255\255\255\255\030\001\031\001\
\032\001\255\255\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\030\001\031\001\255\255\255\255\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\030\001\255\255\255\255\255\255\034\001\035\001\
\036\001\037\001\255\255\255\255\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001"

let yynames_const = "\
  LEFTPAREN\000\
  RIGHTPAREN\000\
  LBRAC\000\
  RBRAC\000\
  EOF\000\
  INT\000\
  NOTE\000\
  CHORD\000\
  SCALE\000\
  STANZA\000\
  SCORE\000\
  VOID\000\
  BOOL\000\
  IN\000\
  IF\000\
  ELSE\000\
  NOELSE\000\
  ELSIF\000\
  WHILE\000\
  FOREACH\000\
  ASSIGN\000\
  PLUSEQ\000\
  MINUSEQ\000\
  TIMESEQ\000\
  DIVIDEEQ\000\
  MOD\000\
  AND\000\
  OR\000\
  MODEQ\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  IS\000\
  ISNT\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  PLUSPLUS\000\
  MINUSMINUS\000\
  RAISE\000\
  LOWER\000\
  METH\000\
  RETURN\000\
  END\000\
  SEMICOLON\000\
  COMMA\000\
  DOT\000\
  "

let yynames_block = "\
  INTLITERAL\000\
  DURATIONCONST\000\
  NOTECONST\000\
  BOOLLITERAL\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 72 "parser.mly"
                 ( [] )
# 606 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.program) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'generic) in
    Obj.repr(
# 73 "parser.mly"
                    ( _2 :: _1 )
# 614 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 76 "parser.mly"
                 ( [] )
# 620 "parser.ml"
               : 'abstraction))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'abstraction) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'innerblock) in
    Obj.repr(
# 77 "parser.mly"
                           ( _2 :: _1 )
# 628 "parser.ml"
               : 'abstraction))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 80 "parser.mly"
       ( VDecl2(_1) )
# 635 "parser.ml"
               : 'innerblock))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fullvdecl) in
    Obj.repr(
# 81 "parser.mly"
             ( FullDecl2(_1) )
# 642 "parser.ml"
               : 'innerblock))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 82 "parser.mly"
             ( Stmt2(_1) )
# 649 "parser.ml"
               : 'innerblock))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 85 "parser.mly"
          ( VDecl(_1) )
# 656 "parser.ml"
               : 'generic))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fullvdecl) in
    Obj.repr(
# 86 "parser.mly"
              ( FullDecl(_1) )
# 663 "parser.ml"
               : 'generic))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'methdecl) in
    Obj.repr(
# 87 "parser.mly"
             ( MDecl(_1) )
# 670 "parser.ml"
               : 'generic))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 88 "parser.mly"
              ( Stmt(_1) )
# 677 "parser.ml"
               : 'generic))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cb_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 92 "parser.mly"
  ({ vartype = _1;
			varname = _2 })
# 686 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'cb_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 96 "parser.mly"
                                  ({ fvtype = _1;
										fvname = _2;
										fvexpr = _4 })
# 697 "parser.ml"
               : 'fullvdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'cb_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'meth_params) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'abstraction) in
    Obj.repr(
# 102 "parser.mly"
  ( {
			rettype = _2;
			fname = _3;
			formals = _5;
			body = List.rev _7 } )
# 711 "parser.ml"
               : 'methdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 109 "parser.mly"
                                           ( Int )
# 717 "parser.ml"
               : 'cb_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 110 "parser.mly"
                                          ( Note )
# 723 "parser.ml"
               : 'cb_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 111 "parser.mly"
                                            ( Chord )
# 729 "parser.ml"
               : 'cb_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 112 "parser.mly"
                                          ( Scale )
# 735 "parser.ml"
               : 'cb_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 113 "parser.mly"
                                          ( Bool )
# 741 "parser.ml"
               : 'cb_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 114 "parser.mly"
                                          ( Stanza )
# 747 "parser.ml"
               : 'cb_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 115 "parser.mly"
                                         ( Score )
# 753 "parser.ml"
               : 'cb_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 116 "parser.mly"
                                       ( Void )
# 759 "parser.ml"
               : 'cb_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 119 "parser.mly"
 ( [] )
# 765 "parser.ml"
               : 'meth_params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param_list) in
    Obj.repr(
# 120 "parser.mly"
              ( List.rev(_1) )
# 772 "parser.ml"
               : 'meth_params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param_decl) in
    Obj.repr(
# 123 "parser.mly"
            ( [_1] )
# 779 "parser.ml"
               : 'param_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'param_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'param_decl) in
    Obj.repr(
# 124 "parser.mly"
                               ( _3 :: _1 )
# 787 "parser.ml"
               : 'param_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'cb_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 128 "parser.mly"
  ( {	paramname = _2;
			paramtype = _1 } )
# 796 "parser.ml"
               : 'param_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 138 "parser.mly"
                ( Expr(_1) )
# 803 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 139 "parser.mly"
                             ( Return(_2) )
# 810 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'abstraction) in
    Obj.repr(
# 140 "parser.mly"
                              ( Block(List.rev _2) )
# 817 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'abstraction) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'elsif_statement) in
    Obj.repr(
# 141 "parser.mly"
                                                                             ( If(_3, _5, _6, Block([])) )
# 826 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'abstraction) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'elsif_statement) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'abstraction) in
    Obj.repr(
# 142 "parser.mly"
                                                                                 ( If(_3, _5, _6, Block(List.rev _8)) )
# 836 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'abstraction) in
    Obj.repr(
# 143 "parser.mly"
                                                   ( While(_3, _5) )
# 844 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'param_decl) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'abstraction) in
    Obj.repr(
# 144 "parser.mly"
                                                                 ( Foreach(_3, _5, _7))
# 853 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 147 "parser.mly"
                    ( Block([]) )
# 859 "parser.ml"
               : 'elsif_statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'abstraction) in
    Obj.repr(
# 148 "parser.mly"
                                               ( ElseIf(_3, _5) )
# 867 "parser.ml"
               : 'elsif_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 151 "parser.mly"
            ( IntLiteral(_1) )
# 874 "parser.ml"
               : 'duration_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 152 "parser.mly"
      ( Id(_1) )
# 881 "parser.ml"
               : 'duration_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 153 "parser.mly"
                 ( DurConst(_1) )
# 888 "parser.ml"
               : 'duration_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 161 "parser.mly"
       ( [_1] )
# 895 "parser.ml"
               : 'generic_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'generic_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 162 "parser.mly"
                           ( _3 :: _1 )
# 903 "parser.ml"
               : 'generic_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 167 "parser.mly"
               ( NoExpr )
# 909 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 168 "parser.mly"
        ( _1 )
# 916 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 171 "parser.mly"
    ( Id(_1) )
# 923 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 172 "parser.mly"
             ( MemberAccess(_1, _3) )
# 931 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 173 "parser.mly"
              ( IntLiteral(_1) )
# 938 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 174 "parser.mly"
             ( NoteConst(_1))
# 945 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 175 "parser.mly"
               (BoolLiteral(_1))
# 952 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'duration_expr) in
    Obj.repr(
# 180 "parser.mly"
                                                                  ( NoteExpr(_2, _4, _6) )
# 961 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'generic_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'duration_expr) in
    Obj.repr(
# 181 "parser.mly"
                                                                       ( ChordExpr(_3, _6) )
# 969 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'generic_list) in
    Obj.repr(
# 182 "parser.mly"
                            ( ListExpr(_2) )
# 976 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 184 "parser.mly"
                         ( Assign(_1, _3) )
# 984 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 185 "parser.mly"
                       ( Assign(_1, BinOp(_1, Add, _3)) )
# 992 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 186 "parser.mly"
                     ( Assign(_1, BinOp(_1, Sub, _3)) )
# 1000 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 187 "parser.mly"
                     ( Assign(_1, BinOp(_1, Mult, _3)) )
# 1008 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 188 "parser.mly"
                      ( Assign(_1, BinOp(_1, Div, _3)) )
# 1016 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 189 "parser.mly"
                   ( Assign(_1, BinOp(_1, Mod, _3)) )
# 1024 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 190 "parser.mly"
                  ( BinOp(_1, Add, _3) )
# 1032 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 191 "parser.mly"
                   ( BinOp(_1, Sub, _3) )
# 1040 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 192 "parser.mly"
                   ( BinOp(_1, Mult, _3) )
# 1048 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 193 "parser.mly"
                    ( BinOp(_1, Div, _3) )
# 1056 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 194 "parser.mly"
                 ( BinOp(_1, Mod, _3) )
# 1064 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 195 "parser.mly"
                 ( BinOp(_1, And, _3) )
# 1072 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 196 "parser.mly"
                ( BinOp(_1, Or, _3) )
# 1080 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 197 "parser.mly"
                ( BinOp(_1, Eq, _3) )
# 1088 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 198 "parser.mly"
                  ( BinOp(_1, NEq, _3) )
# 1096 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 199 "parser.mly"
                ( BinOp(_1, Less, _3) )
# 1104 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 200 "parser.mly"
                 ( BinOp(_1, LEq, _3) )
# 1112 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 201 "parser.mly"
                ( BinOp(_1, Greater, _3) )
# 1120 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 202 "parser.mly"
                 ( BinOp(_1, GEq, _3) )
# 1128 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 203 "parser.mly"
                 ( Assign(_1, BinOp(_1, Add, IntLiteral(1))) )
# 1135 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 204 "parser.mly"
                   ( Assign(_1, BinOp(_1, Sub, IntLiteral(1))) )
# 1142 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 205 "parser.mly"
              ( UnaryOp(Raise, _1) )
# 1149 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 206 "parser.mly"
              ( UnaryOp(Lower, _1) )
# 1156 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 207 "parser.mly"
                             ( _2 )
# 1163 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 208 "parser.mly"
                                       ( MethodCall(_1, _3) )
# 1171 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 211 "parser.mly"
 ( [] )
# 1177 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 212 "parser.mly"
                ( List.rev _1 )
# 1184 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 215 "parser.mly"
      ( [_1] )
# 1191 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 216 "parser.mly"
                           ( _3 :: _1 )
# 1199 "parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
