type token =
  | INTLITERAL of (int)
  | DURATIONCONST of (string)
  | NOTECONST of (string)
  | BOOLLITERAL of (bool)
  | ID of (string)
  | LEFTPAREN
  | RIGHTPAREN
  | LBRAC
  | RBRAC
  | EOF
  | INT
  | NOTE
  | CHORD
  | SCALE
  | STANZA
  | SCORE
  | VOID
  | BOOL
  | IN
  | IF
  | ELSE
  | NOELSE
  | ELSIF
  | WHILE
  | FOREACH
  | ASSIGN
  | PLUSEQ
  | MINUSEQ
  | TIMESEQ
  | DIVIDEEQ
  | MOD
  | AND
  | OR
  | MODEQ
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | IS
  | ISNT
  | LT
  | LEQ
  | GT
  | GEQ
  | PLUSPLUS
  | MINUSMINUS
  | SHARP
  | FLAT
  | RAISE
  | LOWER
  | METH
  | RETURN
  | END
  | SEMICOLON
  | COMMA
  | DOT

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 64 "parser.ml"
let yytransl_const = [|
  262 (* LEFTPAREN *);
  263 (* RIGHTPAREN *);
  264 (* LBRAC *);
  265 (* RBRAC *);
    0 (* EOF *);
  266 (* INT *);
  267 (* NOTE *);
  268 (* CHORD *);
  269 (* SCALE *);
  270 (* STANZA *);
  271 (* SCORE *);
  272 (* VOID *);
  273 (* BOOL *);
  274 (* IN *);
  275 (* IF *);
  276 (* ELSE *);
  277 (* NOELSE *);
  278 (* ELSIF *);
  279 (* WHILE *);
  280 (* FOREACH *);
  281 (* ASSIGN *);
  282 (* PLUSEQ *);
  283 (* MINUSEQ *);
  284 (* TIMESEQ *);
  285 (* DIVIDEEQ *);
  286 (* MOD *);
  287 (* AND *);
  288 (* OR *);
  289 (* MODEQ *);
  290 (* PLUS *);
  291 (* MINUS *);
  292 (* TIMES *);
  293 (* DIVIDE *);
  294 (* IS *);
  295 (* ISNT *);
  296 (* LT *);
  297 (* LEQ *);
  298 (* GT *);
  299 (* GEQ *);
  300 (* PLUSPLUS *);
  301 (* MINUSMINUS *);
  302 (* SHARP *);
  303 (* FLAT *);
  304 (* RAISE *);
  305 (* LOWER *);
  306 (* METH *);
  307 (* RETURN *);
  308 (* END *);
  309 (* SEMICOLON *);
  310 (* COMMA *);
  311 (* DOT *);
    0|]

let yytransl_block = [|
  257 (* INTLITERAL *);
  258 (* DURATIONCONST *);
  259 (* NOTECONST *);
  260 (* BOOLLITERAL *);
  261 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\002\000\002\000\003\000\004\000\
\005\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\009\000\009\000\011\000\011\000\012\000\010\000\010\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\014\000\
\014\000\015\000\015\000\016\000\016\000\013\000\013\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\017\000\017\000\018\000\018\000\000\000"

let yylen = "\002\000\
\000\000\002\000\001\000\001\000\001\000\001\000\003\000\005\000\
\008\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\000\000\001\000\001\000\003\000\002\000\000\000\002\000\
\002\000\003\000\003\000\007\000\009\000\006\000\008\000\000\000\
\005\000\001\000\001\000\000\000\003\000\000\000\001\000\001\000\
\003\000\001\000\001\000\001\000\007\000\007\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\002\000\002\000\002\000\002\000\002\000\002\000\
\003\000\004\000\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\001\000\000\000\000\000\042\000\043\000\044\000\000\000\000\000\
\023\000\036\000\010\000\011\000\012\000\013\000\015\000\016\000\
\017\000\014\000\000\000\000\000\000\000\000\000\000\000\002\000\
\003\000\004\000\005\000\006\000\000\000\000\000\000\000\000\000\
\000\000\036\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\067\000\
\068\000\069\000\070\000\071\000\072\000\025\000\000\000\000\000\
\000\000\041\000\000\000\000\000\073\000\027\000\024\000\047\000\
\000\000\000\000\000\000\000\000\000\000\000\000\026\000\000\000\
\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\074\000\000\000\000\000\000\000\
\000\000\023\000\023\000\022\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\000\
\008\000\034\000\035\000\000\000\000\000\000\000\000\000\030\000\
\023\000\023\000\000\000\045\000\046\000\000\000\023\000\028\000\
\000\000\000\000\021\000\000\000\000\000\031\000\009\000\023\000\
\029\000\000\000"

let yydgoto = "\002\000\
\003\000\024\000\025\000\026\000\027\000\079\000\084\000\030\000\
\126\000\036\000\127\000\085\000\043\000\135\000\132\000\037\000\
\072\000\073\000"

let yysindex = "\004\000\
\000\000\000\000\144\255\000\000\000\000\000\000\012\255\218\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\001\255\008\255\010\255\254\255\040\000\000\000\
\000\000\000\000\000\000\000\000\055\255\238\002\040\000\071\255\
\221\254\000\000\254\001\005\255\016\255\040\000\040\000\254\255\
\078\255\040\003\223\254\235\254\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\040\003\077\255\
\024\255\000\000\085\255\017\255\000\000\000\000\000\000\000\000\
\040\000\041\002\084\002\089\255\086\255\095\255\000\000\040\000\
\000\000\090\003\065\003\065\003\090\003\090\003\083\255\130\003\
\110\003\090\003\170\003\170\003\083\255\083\255\150\003\150\003\
\218\001\218\001\218\001\218\001\000\000\040\000\051\255\052\255\
\040\003\000\000\000\000\000\000\107\255\254\255\011\003\040\003\
\073\255\073\255\174\255\058\255\106\255\110\255\060\255\000\000\
\000\000\000\000\000\000\111\255\113\255\127\255\237\254\000\000\
\000\000\000\000\254\255\000\000\000\000\040\000\000\000\000\000\
\084\255\092\255\000\000\127\002\118\255\000\000\000\000\000\000\
\000\000\182\255"

let yyrindex = "\000\000\
\000\000\000\000\138\000\000\000\000\000\000\000\209\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\087\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\132\255\000\000\
\170\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\093\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\014\255\000\000\
\146\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\162\001\114\001\224\001\185\001\193\001\252\255\121\001\
\154\001\216\001\107\000\144\000\033\000\070\000\073\001\106\001\
\181\000\218\000\255\000\036\001\000\000\000\000\000\000\213\002\
\018\255\000\000\000\000\000\000\000\000\155\255\000\000\015\255\
\000\000\000\000\238\254\000\000\000\000\000\000\157\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\239\254"

let yygindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\162\000\014\000\248\255\
\000\000\077\000\000\000\196\255\000\000\000\000\044\000\137\000\
\000\000\000\000"

let yytablesize = 1243
let yytable = "\035\000\
\143\000\032\000\033\000\088\000\001\000\004\000\038\000\005\000\
\006\000\007\000\008\000\009\000\010\000\039\000\042\000\040\000\
\029\000\031\000\075\000\087\000\077\000\078\000\071\000\019\000\
\080\000\112\000\037\000\020\000\021\000\082\000\083\000\089\000\
\144\000\032\000\033\000\041\000\090\000\091\000\092\000\093\000\
\094\000\095\000\096\000\097\000\098\000\099\000\100\000\101\000\
\102\000\103\000\104\000\105\000\106\000\107\000\108\000\023\000\
\078\000\128\000\004\000\044\000\005\000\006\000\007\000\008\000\
\009\000\010\000\032\000\077\000\078\000\081\000\081\000\037\000\
\113\000\130\000\131\000\074\000\019\000\110\000\147\000\119\000\
\020\000\021\000\086\000\109\000\004\000\111\000\005\000\006\000\
\007\000\008\000\009\000\010\000\004\000\116\000\005\000\006\000\
\007\000\008\000\009\000\010\000\118\000\120\000\019\000\117\000\
\121\000\122\000\020\000\021\000\023\000\136\000\019\000\125\000\
\137\000\139\000\020\000\021\000\138\000\140\000\004\000\141\000\
\005\000\006\000\007\000\008\000\009\000\010\000\064\000\065\000\
\066\000\067\000\068\000\069\000\142\000\148\000\023\000\150\000\
\019\000\079\000\075\000\038\000\020\000\021\000\023\000\151\000\
\004\000\039\000\005\000\006\000\007\000\008\000\009\000\010\000\
\076\000\011\000\012\000\013\000\014\000\015\000\016\000\017\000\
\018\000\018\000\019\000\019\000\028\000\133\000\020\000\021\000\
\023\000\153\000\076\000\000\000\000\000\000\000\004\000\000\000\
\005\000\006\000\007\000\008\000\009\000\010\000\004\000\000\000\
\005\000\006\000\007\000\008\000\009\000\010\000\123\000\124\000\
\019\000\022\000\023\000\134\000\020\000\021\000\000\000\000\000\
\019\000\000\000\000\000\000\000\020\000\021\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\145\000\146\000\040\000\
\000\000\040\000\004\000\149\000\033\000\006\000\007\000\008\000\
\023\000\034\000\000\000\000\000\154\000\000\000\000\000\000\000\
\023\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\058\000\000\000\058\000\040\000\040\000\011\000\
\012\000\013\000\014\000\015\000\016\000\017\000\018\000\000\000\
\000\000\000\000\000\000\000\000\058\000\058\000\058\000\058\000\
\058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
\058\000\058\000\058\000\058\000\058\000\058\000\058\000\056\000\
\004\000\056\000\005\000\006\000\007\000\008\000\000\000\010\000\
\058\000\058\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
\056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
\056\000\056\000\056\000\056\000\057\000\000\000\057\000\000\000\
\000\000\000\000\000\000\000\000\000\000\056\000\056\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\057\000\057\000\
\057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
\057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
\057\000\054\000\000\000\054\000\000\000\000\000\000\000\000\000\
\000\000\000\000\057\000\057\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\054\000\054\000\054\000\054\000\054\000\
\000\000\054\000\054\000\054\000\054\000\054\000\000\000\000\000\
\054\000\054\000\054\000\054\000\054\000\054\000\055\000\000\000\
\055\000\000\000\000\000\000\000\000\000\000\000\000\000\054\000\
\054\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\055\000\055\000\055\000\055\000\055\000\000\000\055\000\055\000\
\055\000\055\000\055\000\000\000\000\000\055\000\055\000\055\000\
\055\000\055\000\055\000\063\000\000\000\063\000\000\000\000\000\
\000\000\000\000\000\000\000\000\055\000\055\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\063\000\063\000\063\000\
\063\000\063\000\000\000\063\000\063\000\063\000\000\000\000\000\
\000\000\000\000\063\000\063\000\063\000\063\000\063\000\063\000\
\064\000\000\000\064\000\000\000\000\000\000\000\000\000\000\000\
\000\000\063\000\063\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\064\000\064\000\064\000\064\000\064\000\000\000\
\064\000\064\000\064\000\000\000\000\000\000\000\000\000\064\000\
\064\000\064\000\064\000\064\000\064\000\065\000\000\000\065\000\
\000\000\000\000\000\000\000\000\000\000\000\000\064\000\064\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\065\000\
\065\000\065\000\065\000\065\000\000\000\065\000\065\000\065\000\
\000\000\000\000\000\000\000\000\065\000\065\000\065\000\065\000\
\065\000\065\000\066\000\000\000\066\000\000\000\000\000\000\000\
\000\000\000\000\000\000\065\000\065\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\066\000\066\000\066\000\066\000\
\066\000\000\000\066\000\066\000\066\000\000\000\000\000\000\000\
\000\000\066\000\066\000\066\000\066\000\066\000\066\000\061\000\
\000\000\061\000\000\000\000\000\000\000\000\000\000\000\000\000\
\066\000\066\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\061\000\061\000\061\000\061\000\061\000\000\000\061\000\
\061\000\061\000\000\000\000\000\000\000\000\000\061\000\061\000\
\062\000\000\000\062\000\000\000\000\000\000\000\000\000\000\000\
\049\000\000\000\049\000\000\000\000\000\061\000\061\000\059\000\
\000\000\059\000\062\000\062\000\062\000\062\000\062\000\000\000\
\062\000\062\000\062\000\049\000\049\000\000\000\000\000\062\000\
\062\000\059\000\059\000\059\000\059\000\059\000\000\000\059\000\
\059\000\059\000\000\000\000\000\000\000\000\000\062\000\062\000\
\060\000\000\000\060\000\000\000\000\000\000\000\049\000\049\000\
\048\000\000\000\048\000\000\000\000\000\059\000\059\000\000\000\
\000\000\000\000\060\000\060\000\060\000\060\000\060\000\000\000\
\000\000\060\000\060\000\048\000\048\000\048\000\048\000\051\000\
\000\000\051\000\048\000\000\000\000\000\000\000\000\000\052\000\
\000\000\052\000\000\000\000\000\000\000\000\000\060\000\060\000\
\000\000\000\000\051\000\051\000\051\000\051\000\048\000\048\000\
\000\000\051\000\052\000\052\000\052\000\052\000\053\000\000\000\
\053\000\052\000\000\000\000\000\000\000\000\000\050\000\000\000\
\050\000\000\000\000\000\000\000\000\000\051\000\051\000\000\000\
\000\000\053\000\053\000\053\000\053\000\052\000\052\000\050\000\
\053\000\050\000\050\000\054\000\055\000\056\000\057\000\000\000\
\000\000\000\000\000\000\000\000\077\000\064\000\065\000\066\000\
\067\000\068\000\069\000\000\000\053\000\053\000\000\000\000\000\
\000\000\000\000\000\000\000\000\050\000\050\000\045\000\046\000\
\047\000\048\000\049\000\050\000\051\000\052\000\053\000\054\000\
\055\000\056\000\057\000\058\000\059\000\060\000\061\000\062\000\
\063\000\064\000\065\000\066\000\067\000\068\000\069\000\114\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\045\000\046\000\047\000\048\000\049\000\050\000\051\000\
\052\000\053\000\054\000\055\000\056\000\057\000\058\000\059\000\
\060\000\061\000\062\000\063\000\064\000\065\000\066\000\067\000\
\068\000\069\000\115\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\045\000\046\000\047\000\048\000\
\049\000\050\000\051\000\052\000\053\000\054\000\055\000\056\000\
\057\000\058\000\059\000\060\000\061\000\062\000\063\000\064\000\
\065\000\066\000\067\000\068\000\069\000\152\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\045\000\
\046\000\047\000\048\000\049\000\050\000\051\000\052\000\053\000\
\054\000\055\000\056\000\057\000\058\000\059\000\060\000\061\000\
\062\000\063\000\064\000\065\000\066\000\067\000\068\000\069\000\
\043\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\043\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\043\000\047\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\045\000\046\000\
\047\000\048\000\049\000\050\000\051\000\052\000\053\000\054\000\
\055\000\056\000\057\000\058\000\059\000\060\000\061\000\062\000\
\063\000\064\000\065\000\066\000\067\000\068\000\069\000\000\000\
\000\000\000\000\070\000\045\000\046\000\047\000\048\000\049\000\
\050\000\051\000\052\000\053\000\054\000\055\000\056\000\057\000\
\058\000\059\000\060\000\061\000\062\000\063\000\064\000\065\000\
\066\000\067\000\068\000\069\000\000\000\000\000\000\000\129\000\
\045\000\046\000\047\000\048\000\049\000\050\000\051\000\052\000\
\053\000\054\000\055\000\056\000\057\000\058\000\059\000\060\000\
\061\000\062\000\063\000\064\000\065\000\066\000\067\000\068\000\
\069\000\045\000\000\000\000\000\048\000\049\000\050\000\051\000\
\052\000\053\000\054\000\055\000\056\000\057\000\058\000\059\000\
\060\000\061\000\062\000\063\000\064\000\065\000\066\000\067\000\
\068\000\069\000\045\000\000\000\000\000\000\000\000\000\050\000\
\051\000\052\000\000\000\054\000\055\000\056\000\057\000\058\000\
\059\000\060\000\061\000\062\000\063\000\064\000\065\000\066\000\
\067\000\068\000\069\000\050\000\051\000\000\000\000\000\054\000\
\055\000\056\000\057\000\058\000\059\000\060\000\061\000\062\000\
\063\000\064\000\065\000\066\000\067\000\068\000\069\000\050\000\
\000\000\000\000\000\000\054\000\055\000\056\000\057\000\058\000\
\059\000\060\000\061\000\062\000\063\000\064\000\065\000\066\000\
\067\000\068\000\069\000\050\000\000\000\000\000\000\000\054\000\
\055\000\056\000\057\000\000\000\000\000\060\000\061\000\062\000\
\063\000\064\000\065\000\066\000\067\000\068\000\069\000\050\000\
\000\000\000\000\000\000\000\000\000\000\056\000\057\000\000\000\
\000\000\000\000\000\000\000\000\000\000\064\000\065\000\066\000\
\067\000\068\000\069\000"

let yycheck = "\008\000\
\020\001\020\001\020\001\025\001\001\000\001\001\006\001\003\001\
\004\001\005\001\006\001\007\001\008\001\006\001\023\000\006\001\
\003\000\006\001\054\001\053\001\007\001\007\001\031\000\019\001\
\009\001\009\001\009\001\023\001\024\001\038\000\039\000\053\001\
\052\001\052\001\052\001\022\000\045\000\046\000\047\000\048\000\
\049\000\050\000\051\000\052\000\053\000\054\000\055\000\056\000\
\057\000\058\000\059\000\060\000\061\000\062\000\063\000\051\001\
\052\001\118\000\001\001\005\001\003\001\004\001\005\001\006\001\
\007\001\008\001\055\001\054\001\054\001\054\001\054\001\054\001\
\081\000\001\001\002\001\005\001\019\001\054\001\139\000\088\000\
\023\001\024\001\005\001\007\001\001\001\001\001\003\001\004\001\
\005\001\006\001\007\001\008\001\001\001\005\001\003\001\004\001\
\005\001\006\001\007\001\008\001\006\001\110\000\019\001\018\001\
\054\001\054\001\023\001\024\001\051\001\052\001\019\001\005\001\
\007\001\054\001\023\001\024\001\007\001\007\001\001\001\007\001\
\003\001\004\001\005\001\006\001\007\001\008\001\044\001\045\001\
\046\001\047\001\048\001\049\001\006\001\142\000\051\001\052\001\
\019\001\000\000\007\001\053\001\023\001\024\001\051\001\052\001\
\001\001\053\001\003\001\004\001\005\001\006\001\007\001\008\001\
\007\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\007\001\019\001\007\001\003\000\122\000\023\001\024\001\
\051\001\052\001\034\000\255\255\255\255\255\255\001\001\255\255\
\003\001\004\001\005\001\006\001\007\001\008\001\001\001\255\255\
\003\001\004\001\005\001\006\001\007\001\008\001\114\000\115\000\
\019\001\050\001\051\001\022\001\023\001\024\001\255\255\255\255\
\019\001\255\255\255\255\255\255\023\001\024\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\137\000\138\000\007\001\
\255\255\009\001\001\001\143\000\003\001\004\001\005\001\006\001\
\051\001\008\001\255\255\255\255\152\000\255\255\255\255\255\255\
\051\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\007\001\255\255\009\001\053\001\054\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\255\255\
\255\255\255\255\255\255\255\255\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\007\001\
\001\001\009\001\003\001\004\001\005\001\006\001\255\255\008\001\
\053\001\054\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\007\001\255\255\009\001\255\255\
\255\255\255\255\255\255\255\255\255\255\053\001\054\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\007\001\255\255\009\001\255\255\255\255\255\255\255\255\
\255\255\255\255\053\001\054\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\025\001\026\001\027\001\028\001\029\001\
\255\255\031\001\032\001\033\001\034\001\035\001\255\255\255\255\
\038\001\039\001\040\001\041\001\042\001\043\001\007\001\255\255\
\009\001\255\255\255\255\255\255\255\255\255\255\255\255\053\001\
\054\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\025\001\026\001\027\001\028\001\029\001\255\255\031\001\032\001\
\033\001\034\001\035\001\255\255\255\255\038\001\039\001\040\001\
\041\001\042\001\043\001\007\001\255\255\009\001\255\255\255\255\
\255\255\255\255\255\255\255\255\053\001\054\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\025\001\026\001\027\001\
\028\001\029\001\255\255\031\001\032\001\033\001\255\255\255\255\
\255\255\255\255\038\001\039\001\040\001\041\001\042\001\043\001\
\007\001\255\255\009\001\255\255\255\255\255\255\255\255\255\255\
\255\255\053\001\054\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\025\001\026\001\027\001\028\001\029\001\255\255\
\031\001\032\001\033\001\255\255\255\255\255\255\255\255\038\001\
\039\001\040\001\041\001\042\001\043\001\007\001\255\255\009\001\
\255\255\255\255\255\255\255\255\255\255\255\255\053\001\054\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\025\001\
\026\001\027\001\028\001\029\001\255\255\031\001\032\001\033\001\
\255\255\255\255\255\255\255\255\038\001\039\001\040\001\041\001\
\042\001\043\001\007\001\255\255\009\001\255\255\255\255\255\255\
\255\255\255\255\255\255\053\001\054\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\025\001\026\001\027\001\028\001\
\029\001\255\255\031\001\032\001\033\001\255\255\255\255\255\255\
\255\255\038\001\039\001\040\001\041\001\042\001\043\001\007\001\
\255\255\009\001\255\255\255\255\255\255\255\255\255\255\255\255\
\053\001\054\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\025\001\026\001\027\001\028\001\029\001\255\255\031\001\
\032\001\033\001\255\255\255\255\255\255\255\255\038\001\039\001\
\007\001\255\255\009\001\255\255\255\255\255\255\255\255\255\255\
\007\001\255\255\009\001\255\255\255\255\053\001\054\001\007\001\
\255\255\009\001\025\001\026\001\027\001\028\001\029\001\255\255\
\031\001\032\001\033\001\026\001\027\001\255\255\255\255\038\001\
\039\001\025\001\026\001\027\001\028\001\029\001\255\255\031\001\
\032\001\033\001\255\255\255\255\255\255\255\255\053\001\054\001\
\007\001\255\255\009\001\255\255\255\255\255\255\053\001\054\001\
\007\001\255\255\009\001\255\255\255\255\053\001\054\001\255\255\
\255\255\255\255\025\001\026\001\027\001\028\001\029\001\255\255\
\255\255\032\001\033\001\026\001\027\001\028\001\029\001\007\001\
\255\255\009\001\033\001\255\255\255\255\255\255\255\255\007\001\
\255\255\009\001\255\255\255\255\255\255\255\255\053\001\054\001\
\255\255\255\255\026\001\027\001\028\001\029\001\053\001\054\001\
\255\255\033\001\026\001\027\001\028\001\029\001\007\001\255\255\
\009\001\033\001\255\255\255\255\255\255\255\255\007\001\255\255\
\009\001\255\255\255\255\255\255\255\255\053\001\054\001\255\255\
\255\255\026\001\027\001\028\001\029\001\053\001\054\001\030\001\
\033\001\026\001\027\001\034\001\035\001\036\001\037\001\255\255\
\255\255\255\255\255\255\255\255\007\001\044\001\045\001\046\001\
\047\001\048\001\049\001\255\255\053\001\054\001\255\255\255\255\
\255\255\255\255\255\255\255\255\053\001\054\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\007\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\007\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\007\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\007\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\007\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\255\255\
\255\255\255\255\053\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\255\255\255\255\255\255\053\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\025\001\255\255\255\255\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\025\001\255\255\255\255\255\255\255\255\030\001\
\031\001\032\001\255\255\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\030\001\031\001\255\255\255\255\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\030\001\
\255\255\255\255\255\255\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\030\001\255\255\255\255\255\255\034\001\
\035\001\036\001\037\001\255\255\255\255\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\030\001\
\255\255\255\255\255\255\255\255\255\255\036\001\037\001\255\255\
\255\255\255\255\255\255\255\255\255\255\044\001\045\001\046\001\
\047\001\048\001\049\001"

let yynames_const = "\
  LEFTPAREN\000\
  RIGHTPAREN\000\
  LBRAC\000\
  RBRAC\000\
  EOF\000\
  INT\000\
  NOTE\000\
  CHORD\000\
  SCALE\000\
  STANZA\000\
  SCORE\000\
  VOID\000\
  BOOL\000\
  IN\000\
  IF\000\
  ELSE\000\
  NOELSE\000\
  ELSIF\000\
  WHILE\000\
  FOREACH\000\
  ASSIGN\000\
  PLUSEQ\000\
  MINUSEQ\000\
  TIMESEQ\000\
  DIVIDEEQ\000\
  MOD\000\
  AND\000\
  OR\000\
  MODEQ\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  IS\000\
  ISNT\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  PLUSPLUS\000\
  MINUSMINUS\000\
  SHARP\000\
  FLAT\000\
  RAISE\000\
  LOWER\000\
  METH\000\
  RETURN\000\
  END\000\
  SEMICOLON\000\
  COMMA\000\
  DOT\000\
  "

let yynames_block = "\
  INTLITERAL\000\
  DURATIONCONST\000\
  NOTECONST\000\
  BOOLLITERAL\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 74 "parser.mly"
                 ( [] )
# 612 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.program) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'generic) in
    Obj.repr(
# 75 "parser.mly"
                    ( _2 :: _1 )
# 620 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 79 "parser.mly"
          ( VDecl(_1) )
# 627 "parser.ml"
               : 'generic))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fullvdecl) in
    Obj.repr(
# 80 "parser.mly"
              ( FullDecl(_1) )
# 634 "parser.ml"
               : 'generic))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'methdecl) in
    Obj.repr(
# 81 "parser.mly"
             ( MDecl(_1) )
# 641 "parser.ml"
               : 'generic))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 82 "parser.mly"
              ( Stmt(_1) )
# 648 "parser.ml"
               : 'generic))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cb_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 86 "parser.mly"
  ({ vartype = _1;
			varname = _2 })
# 657 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'cb_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 90 "parser.mly"
                                  ({ fvtype = _1;
										fvname = _2;
										fvexpr = _4 })
# 668 "parser.ml"
               : 'fullvdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'cb_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'meth_params) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 96 "parser.mly"
  ( {
			rettype = _2;
			fname = _3;
			formals = _5;
			body = List.rev _7 } )
# 682 "parser.ml"
               : 'methdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 103 "parser.mly"
                                           ( Int )
# 688 "parser.ml"
               : 'cb_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 104 "parser.mly"
                                          ( Note )
# 694 "parser.ml"
               : 'cb_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 105 "parser.mly"
                                            ( Chord )
# 700 "parser.ml"
               : 'cb_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 106 "parser.mly"
                                          ( Scale )
# 706 "parser.ml"
               : 'cb_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 107 "parser.mly"
                                          ( Bool )
# 712 "parser.ml"
               : 'cb_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 108 "parser.mly"
                                          ( Stanza )
# 718 "parser.ml"
               : 'cb_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 109 "parser.mly"
                                         ( Score )
# 724 "parser.ml"
               : 'cb_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 110 "parser.mly"
                                       ( Void )
# 730 "parser.ml"
               : 'cb_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 113 "parser.mly"
 ( [] )
# 736 "parser.ml"
               : 'meth_params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param_list) in
    Obj.repr(
# 114 "parser.mly"
              ( List.rev(_1) )
# 743 "parser.ml"
               : 'meth_params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param_decl) in
    Obj.repr(
# 117 "parser.mly"
            ( [_1] )
# 750 "parser.ml"
               : 'param_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'param_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'param_decl) in
    Obj.repr(
# 118 "parser.mly"
                               ( _3 :: _1 )
# 758 "parser.ml"
               : 'param_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'cb_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 122 "parser.mly"
  ( {	paramname = _2;
			paramtype = _1 } )
# 767 "parser.ml"
               : 'param_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 126 "parser.mly"
 ( [] )
# 773 "parser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 127 "parser.mly"
                            ( _2 :: _1 )
# 781 "parser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 130 "parser.mly"
                ( Expr(_1) )
# 788 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 131 "parser.mly"
                             ( Return(_2) )
# 795 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 132 "parser.mly"
                                 ( Block(List.rev _2) )
# 802 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'statement_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'elsif_statement) in
    Obj.repr(
# 133 "parser.mly"
                                                                                ( If(_3, _5, _6, Block([])) )
# 811 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'statement_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'elsif_statement) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 134 "parser.mly"
                                                                                       ( If(_3, _5, _6, Block(List.rev _8)) )
# 821 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 135 "parser.mly"
                                                      ( While(_3, _5) )
# 829 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'param_decl) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 136 "parser.mly"
                                                                    ( Foreach(_3, _5, _7))
# 838 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 139 "parser.mly"
                    ( Block([]) )
# 844 "parser.ml"
               : 'elsif_statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'statement_list) in
    Obj.repr(
# 140 "parser.mly"
                                                  ( ElseIf(_3, _5) )
# 852 "parser.ml"
               : 'elsif_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 143 "parser.mly"
            ( DurInt(_1) )
# 859 "parser.ml"
               : 'duration_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 144 "parser.mly"
                 ( DurConst(_1) )
# 866 "parser.ml"
               : 'duration_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 151 "parser.mly"
                               ( [] )
# 872 "parser.ml"
               : 'generic_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'generic_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 152 "parser.mly"
                           (_3 :: _1)
# 880 "parser.ml"
               : 'generic_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 156 "parser.mly"
               ( NoExpr )
# 886 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 157 "parser.mly"
        ( _1 )
# 893 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 160 "parser.mly"
    ( Id(_1) )
# 900 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 161 "parser.mly"
             ( MemberAccess(_1, _3) )
# 908 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 162 "parser.mly"
              ( IntLiteral(_1) )
# 915 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 163 "parser.mly"
             ( NoteConst(_1))
# 922 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 164 "parser.mly"
               (BoolLiteral(_1))
# 929 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'duration_expr) in
    Obj.repr(
# 169 "parser.mly"
                                                                        ( NoteExpr(_2, _4, _6) )
# 938 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'generic_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'duration_expr) in
    Obj.repr(
# 170 "parser.mly"
                                                                       ( ChordExpr(_3, _6) )
# 946 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'generic_list) in
    Obj.repr(
# 171 "parser.mly"
                            ( ListExpr(_2) )
# 953 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 173 "parser.mly"
                         ( Assign(_1, _3) )
# 961 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 174 "parser.mly"
                       ( Assign(_1, BinOp(_1, Add, _3)) )
# 969 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 175 "parser.mly"
                     ( Assign(_1, BinOp(_1, Sub, _3)) )
# 977 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 176 "parser.mly"
                     ( Assign(_1, BinOp(_1, Mult, _3)) )
# 985 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 177 "parser.mly"
                      ( Assign(_1, BinOp(_1, Div, _3)) )
# 993 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 178 "parser.mly"
                   ( Assign(_1, BinOp(_1, Mod, _3)) )
# 1001 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 179 "parser.mly"
                  ( BinOp(_1, Add, _3) )
# 1009 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 180 "parser.mly"
                   ( BinOp(_1, Sub, _3) )
# 1017 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 181 "parser.mly"
                   ( BinOp(_1, Mult, _3) )
# 1025 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 182 "parser.mly"
                    ( BinOp(_1, Div, _3) )
# 1033 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 183 "parser.mly"
                 ( BinOp(_1, Mod, _3) )
# 1041 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 184 "parser.mly"
                 ( BinOp(_1, And, _3) )
# 1049 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 185 "parser.mly"
                ( BinOp(_1, Or, _3) )
# 1057 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 186 "parser.mly"
                ( BinOp(_1, Eq, _3) )
# 1065 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 187 "parser.mly"
                  ( BinOp(_1, NEq, _3) )
# 1073 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 188 "parser.mly"
                ( BinOp(_1, Less, _3) )
# 1081 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 189 "parser.mly"
                 ( BinOp(_1, LEq, _3) )
# 1089 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 190 "parser.mly"
                ( BinOp(_1, Greater, _3) )
# 1097 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 191 "parser.mly"
                 ( BinOp(_1, GEq, _3) )
# 1105 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 192 "parser.mly"
                 ( Assign(_1, BinOp(_1, Add, IntLiteral(1))) )
# 1112 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 193 "parser.mly"
                   ( Assign(_1, BinOp(_1, Sub, IntLiteral(1))) )
# 1119 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 194 "parser.mly"
              ( UnaryOp(Sharp, _1) )
# 1126 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 195 "parser.mly"
              ( UnaryOp(Flat, _1) )
# 1133 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 196 "parser.mly"
              ( UnaryOp(Raise, _1) )
# 1140 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 197 "parser.mly"
              ( UnaryOp(Lower, _1) )
# 1147 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 198 "parser.mly"
                             ( _2 )
# 1154 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 199 "parser.mly"
                                       ( MethodCall(_1, _3) )
# 1162 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 202 "parser.mly"
 ( [] )
# 1168 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 203 "parser.mly"
                ( List.rev _1 )
# 1175 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 206 "parser.mly"
      ( [_1] )
# 1182 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 207 "parser.mly"
                           ( _3 :: _1 )
# 1190 "parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
