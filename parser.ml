type token =
  | INTLITERAL of (int)
  | OCTAVE of (int)
  | DURATIONINT of (int)
  | DURATIONCONST of (string)
  | NOTECONST of (string)
  | BOOLLITERAL of (bool)
  | ID of (string)
  | LEFTPAREN
  | RIGHTPAREN
  | LBRAC
  | RBRAC
  | EOF
  | INT
  | NOTE
  | CHORD
  | SCALE
  | STANZA
  | SCORE
  | VOID
  | BOOL
  | IN
  | IF
  | ELSE
  | NOELSE
  | ELSIF
  | WHILE
  | FOREACH
  | ASSIGN
  | PLUSEQ
  | MINUSEQ
  | TIMESEQ
  | DIVIDEEQ
  | MOD
  | AND
  | OR
  | MODEQ
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | IS
  | ISNT
  | LT
  | LEQ
  | GT
  | GEQ
  | PLUSPLUS
  | MINUSMINUS
  | SHARP
  | FLAT
  | RAISE
  | LOWER
  | METH
  | RETURN
  | END
  | SEMICOLON
  | COMMA
  | DOT

open Parsing;;
# 1 "parser.mly"
 open Ast 
# 65 "parser.ml"
let yytransl_const = [|
  264 (* LEFTPAREN *);
  265 (* RIGHTPAREN *);
  266 (* LBRAC *);
  267 (* RBRAC *);
    0 (* EOF *);
  268 (* INT *);
  269 (* NOTE *);
  270 (* CHORD *);
  271 (* SCALE *);
  272 (* STANZA *);
  273 (* SCORE *);
  274 (* VOID *);
  275 (* BOOL *);
  276 (* IN *);
  277 (* IF *);
  278 (* ELSE *);
  279 (* NOELSE *);
  280 (* ELSIF *);
  281 (* WHILE *);
  282 (* FOREACH *);
  283 (* ASSIGN *);
  284 (* PLUSEQ *);
  285 (* MINUSEQ *);
  286 (* TIMESEQ *);
  287 (* DIVIDEEQ *);
  288 (* MOD *);
  289 (* AND *);
  290 (* OR *);
  291 (* MODEQ *);
  292 (* PLUS *);
  293 (* MINUS *);
  294 (* TIMES *);
  295 (* DIVIDE *);
  296 (* IS *);
  297 (* ISNT *);
  298 (* LT *);
  299 (* LEQ *);
  300 (* GT *);
  301 (* GEQ *);
  302 (* PLUSPLUS *);
  303 (* MINUSMINUS *);
  304 (* SHARP *);
  305 (* FLAT *);
  306 (* RAISE *);
  307 (* LOWER *);
  308 (* METH *);
  309 (* RETURN *);
  310 (* END *);
  311 (* SEMICOLON *);
  312 (* COMMA *);
  313 (* DOT *);
    0|]

let yytransl_block = [|
  257 (* INTLITERAL *);
  258 (* OCTAVE *);
  259 (* DURATIONINT *);
  260 (* DURATIONCONST *);
  261 (* NOTECONST *);
  262 (* BOOLLITERAL *);
  263 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\003\000\005\000\005\000\002\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\006\000\006\000\
\008\000\008\000\009\000\007\000\007\000\007\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\013\000\013\000\014\000\
\014\000\015\000\015\000\012\000\012\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\016\000\016\000\017\000\017\000\000\000"

let yylen = "\002\000\
\000\000\001\000\003\000\000\000\002\000\009\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\000\000\001\000\
\001\000\003\000\002\000\000\000\002\000\002\000\002\000\003\000\
\003\000\007\000\009\000\006\000\008\000\000\000\005\000\001\000\
\001\000\000\000\003\000\000\000\001\000\001\000\003\000\001\000\
\001\000\001\000\001\000\007\000\007\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\002\000\002\000\002\000\002\000\002\000\002\000\003\000\
\004\000\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\078\000\002\000\007\000\008\000\009\000\
\010\000\012\000\013\000\014\000\011\000\000\000\000\000\000\000\
\000\000\000\000\000\000\017\000\019\000\004\000\000\000\000\000\
\018\000\005\000\000\000\000\000\000\000\040\000\032\000\033\000\
\041\000\042\000\000\000\000\000\020\000\034\000\000\000\000\000\
\000\000\000\000\006\000\022\000\021\000\000\000\043\000\003\000\
\000\000\000\000\000\000\034\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\066\000\
\067\000\068\000\069\000\070\000\071\000\023\000\000\000\000\000\
\000\000\039\000\000\000\000\000\072\000\025\000\046\000\000\000\
\000\000\000\000\000\000\024\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\073\000\
\000\000\000\000\000\000\000\000\020\000\020\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\028\000\020\000\044\000\045\000\000\000\020\000\026\000\
\000\000\000\000\000\000\029\000\020\000\027\000\000\000"

let yydgoto = "\002\000\
\004\000\044\000\026\000\017\000\024\000\018\000\028\000\019\000\
\020\000\045\000\046\000\060\000\137\000\047\000\055\000\088\000\
\089\000"

let yysindex = "\004\000\
\212\254\000\000\022\002\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\005\255\008\255\022\002\
\013\255\016\255\224\254\000\000\000\000\000\000\022\002\022\002\
\000\000\000\000\056\255\044\255\009\255\000\000\000\000\000\000\
\000\000\000\000\254\254\070\000\000\000\000\000\058\255\059\255\
\060\255\176\001\000\000\000\000\000\000\035\003\000\000\000\000\
\176\001\066\255\018\255\000\000\051\002\074\255\002\255\176\001\
\176\001\022\002\064\003\021\255\176\001\176\001\176\001\176\001\
\176\001\176\001\176\001\176\001\176\001\176\001\176\001\176\001\
\176\001\176\001\176\001\176\001\176\001\176\001\176\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\064\003\076\255\
\031\255\000\000\088\255\004\255\000\000\000\000\000\000\176\001\
\094\002\137\002\072\255\000\000\114\003\089\003\089\003\114\003\
\114\003\211\255\154\003\134\003\114\003\023\002\023\002\211\255\
\211\255\174\003\174\003\238\255\238\255\238\255\238\255\000\000\
\176\001\038\255\045\255\064\003\000\000\000\000\086\255\064\003\
\015\255\015\255\214\255\110\255\096\255\099\255\100\255\102\255\
\037\255\000\000\000\000\000\000\000\000\176\001\000\000\000\000\
\140\255\180\002\150\255\000\000\000\000\000\000\243\255"

let yyrindex = "\000\000\
\121\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\113\255\
\000\000\000\000\114\255\000\000\000\000\000\000\000\000\180\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\014\000\000\000\000\000\000\000\000\000\000\000\
\000\000\069\255\000\000\000\000\000\000\000\000\000\000\000\000\
\116\255\000\000\223\002\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\075\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\255\000\000\
\120\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\223\001\171\255\200\255\246\001\
\254\001\057\000\182\001\215\001\021\002\168\000\205\000\094\000\
\131\000\134\001\167\001\242\000\023\001\060\001\097\001\000\000\
\000\000\000\000\010\003\006\255\000\000\000\000\000\000\001\255\
\000\000\000\000\049\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\050\255"

let yygindex = "\000\000\
\000\000\132\000\000\000\255\255\000\000\000\000\219\255\000\000\
\244\255\000\000\221\255\000\000\000\000\130\255\080\000\000\000\
\000\000"

let yytablesize = 1249
let yytable = "\054\000\
\053\000\014\000\134\000\135\000\001\000\049\000\059\000\003\000\
\076\000\077\000\025\000\015\000\095\000\087\000\123\000\016\000\
\035\000\031\000\032\000\021\000\097\000\098\000\027\000\023\000\
\022\000\101\000\102\000\103\000\104\000\105\000\106\000\107\000\
\108\000\109\000\110\000\111\000\112\000\113\000\114\000\115\000\
\116\000\117\000\118\000\119\000\030\000\099\000\031\000\032\000\
\033\000\034\000\035\000\036\000\037\000\038\000\050\000\076\000\
\077\000\096\000\143\000\096\000\124\000\035\000\029\000\048\000\
\039\000\056\000\057\000\058\000\040\000\041\000\030\000\031\000\
\090\000\091\000\030\000\100\000\031\000\032\000\033\000\034\000\
\035\000\036\000\037\000\038\000\120\000\128\000\121\000\131\000\
\132\000\122\000\144\000\127\000\133\000\129\000\039\000\003\000\
\042\000\043\000\040\000\041\000\130\000\145\000\030\000\031\000\
\139\000\147\000\146\000\140\000\141\000\142\000\030\000\151\000\
\031\000\032\000\033\000\034\000\035\000\036\000\037\000\038\000\
\001\000\015\000\016\000\036\000\074\000\003\000\042\000\094\000\
\075\000\037\000\039\000\092\000\005\000\000\000\040\000\041\000\
\000\000\000\000\000\000\000\000\030\000\000\000\031\000\032\000\
\033\000\034\000\035\000\036\000\037\000\038\000\030\000\000\000\
\031\000\032\000\033\000\034\000\035\000\036\000\037\000\038\000\
\039\000\003\000\042\000\138\000\040\000\041\000\000\000\000\000\
\000\000\000\000\039\000\000\000\000\000\000\000\040\000\041\000\
\000\000\000\000\000\000\048\000\020\000\048\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\000\000\003\000\
\042\000\148\000\000\000\000\000\000\000\000\000\048\000\048\000\
\020\000\003\000\042\000\150\000\020\000\020\000\000\000\000\000\
\049\000\000\000\049\000\000\000\000\000\000\000\030\000\000\000\
\031\000\032\000\033\000\034\000\035\000\036\000\037\000\038\000\
\000\000\048\000\048\000\049\000\049\000\000\000\000\000\020\000\
\020\000\020\000\039\000\000\000\000\000\136\000\040\000\041\000\
\000\000\000\000\000\000\030\000\000\000\031\000\032\000\033\000\
\034\000\035\000\036\000\037\000\038\000\000\000\049\000\049\000\
\080\000\081\000\082\000\083\000\084\000\085\000\000\000\039\000\
\000\000\003\000\042\000\040\000\041\000\066\000\000\000\000\000\
\000\000\070\000\071\000\072\000\073\000\000\000\038\000\000\000\
\038\000\000\000\000\000\080\000\081\000\082\000\083\000\084\000\
\085\000\000\000\000\000\000\000\000\000\000\000\003\000\042\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\057\000\000\000\057\000\038\000\038\000\030\000\000\000\
\031\000\032\000\051\000\034\000\035\000\036\000\000\000\052\000\
\000\000\000\000\000\000\057\000\057\000\057\000\057\000\057\000\
\057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
\057\000\057\000\057\000\057\000\057\000\057\000\055\000\000\000\
\055\000\000\000\000\000\000\000\000\000\000\000\000\000\057\000\
\057\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
\055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
\055\000\055\000\055\000\056\000\000\000\056\000\000\000\000\000\
\000\000\000\000\000\000\000\000\055\000\055\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\056\000\056\000\056\000\
\056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
\056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
\053\000\000\000\053\000\000\000\000\000\000\000\000\000\000\000\
\000\000\056\000\056\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\053\000\053\000\053\000\053\000\053\000\000\000\
\053\000\053\000\053\000\053\000\053\000\000\000\000\000\053\000\
\053\000\053\000\053\000\053\000\053\000\054\000\000\000\054\000\
\000\000\000\000\000\000\000\000\000\000\000\000\053\000\053\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\054\000\
\054\000\054\000\054\000\054\000\000\000\054\000\054\000\054\000\
\054\000\054\000\000\000\000\000\054\000\054\000\054\000\054\000\
\054\000\054\000\062\000\000\000\062\000\000\000\000\000\000\000\
\000\000\000\000\000\000\054\000\054\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\062\000\062\000\062\000\062\000\
\062\000\000\000\062\000\062\000\062\000\000\000\000\000\000\000\
\000\000\062\000\062\000\062\000\062\000\062\000\062\000\063\000\
\000\000\063\000\000\000\000\000\000\000\000\000\000\000\000\000\
\062\000\062\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\063\000\063\000\063\000\063\000\063\000\000\000\063\000\
\063\000\063\000\000\000\000\000\000\000\000\000\063\000\063\000\
\063\000\063\000\063\000\063\000\064\000\000\000\064\000\000\000\
\000\000\000\000\000\000\000\000\000\000\063\000\063\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\064\000\064\000\
\064\000\064\000\064\000\000\000\064\000\064\000\064\000\000\000\
\000\000\000\000\000\000\064\000\064\000\064\000\064\000\064\000\
\064\000\065\000\000\000\065\000\000\000\000\000\000\000\000\000\
\000\000\000\000\064\000\064\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\065\000\065\000\065\000\065\000\065\000\
\000\000\065\000\065\000\065\000\000\000\000\000\000\000\000\000\
\065\000\065\000\065\000\065\000\065\000\065\000\060\000\000\000\
\060\000\000\000\000\000\000\000\000\000\000\000\000\000\065\000\
\065\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\060\000\060\000\060\000\060\000\060\000\000\000\060\000\060\000\
\060\000\000\000\000\000\000\000\000\000\060\000\060\000\061\000\
\030\000\061\000\031\000\032\000\033\000\034\000\035\000\036\000\
\000\000\038\000\000\000\000\000\060\000\060\000\058\000\000\000\
\058\000\061\000\061\000\061\000\061\000\061\000\000\000\061\000\
\061\000\061\000\000\000\000\000\000\000\000\000\061\000\061\000\
\058\000\058\000\058\000\058\000\058\000\000\000\058\000\058\000\
\058\000\000\000\000\000\000\000\000\000\061\000\061\000\059\000\
\000\000\059\000\000\000\000\000\000\000\000\000\000\000\047\000\
\000\000\047\000\000\000\000\000\058\000\058\000\000\000\000\000\
\000\000\059\000\059\000\059\000\059\000\059\000\000\000\000\000\
\059\000\059\000\047\000\047\000\047\000\047\000\050\000\000\000\
\050\000\047\000\000\000\000\000\000\000\000\000\051\000\000\000\
\051\000\000\000\000\000\000\000\000\000\059\000\059\000\000\000\
\000\000\050\000\050\000\050\000\050\000\047\000\047\000\000\000\
\050\000\051\000\051\000\051\000\051\000\052\000\000\000\052\000\
\051\000\006\000\007\000\008\000\009\000\010\000\011\000\012\000\
\013\000\000\000\000\000\000\000\050\000\050\000\000\000\000\000\
\052\000\052\000\052\000\052\000\051\000\051\000\066\000\052\000\
\000\000\000\000\000\000\093\000\072\000\073\000\000\000\000\000\
\000\000\000\000\000\000\000\000\080\000\081\000\082\000\083\000\
\084\000\085\000\000\000\052\000\052\000\061\000\062\000\063\000\
\064\000\065\000\066\000\067\000\068\000\069\000\070\000\071\000\
\072\000\073\000\074\000\075\000\076\000\077\000\078\000\079\000\
\080\000\081\000\082\000\083\000\084\000\085\000\125\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\061\000\062\000\063\000\064\000\065\000\066\000\067\000\068\000\
\069\000\070\000\071\000\072\000\073\000\074\000\075\000\076\000\
\077\000\078\000\079\000\080\000\081\000\082\000\083\000\084\000\
\085\000\126\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\061\000\062\000\063\000\064\000\065\000\
\066\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\076\000\077\000\078\000\079\000\080\000\081\000\
\082\000\083\000\084\000\085\000\149\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\061\000\062\000\
\063\000\064\000\065\000\066\000\067\000\068\000\069\000\070\000\
\071\000\072\000\073\000\074\000\075\000\076\000\077\000\078\000\
\079\000\080\000\081\000\082\000\083\000\084\000\085\000\041\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\041\000\041\000\046\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\046\000\046\000\046\000\046\000\
\046\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
\046\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
\046\000\046\000\046\000\046\000\046\000\061\000\062\000\063\000\
\064\000\065\000\066\000\067\000\068\000\069\000\070\000\071\000\
\072\000\073\000\074\000\075\000\076\000\077\000\078\000\079\000\
\080\000\081\000\082\000\083\000\084\000\085\000\000\000\000\000\
\000\000\086\000\061\000\062\000\063\000\064\000\065\000\066\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\077\000\078\000\079\000\080\000\081\000\082\000\
\083\000\084\000\085\000\061\000\000\000\000\000\064\000\065\000\
\066\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\076\000\077\000\078\000\079\000\080\000\081\000\
\082\000\083\000\084\000\085\000\061\000\000\000\000\000\000\000\
\000\000\066\000\067\000\068\000\000\000\070\000\071\000\072\000\
\073\000\074\000\075\000\076\000\077\000\078\000\079\000\080\000\
\081\000\082\000\083\000\084\000\085\000\066\000\067\000\000\000\
\000\000\070\000\071\000\072\000\073\000\074\000\075\000\076\000\
\077\000\078\000\079\000\080\000\081\000\082\000\083\000\084\000\
\085\000\066\000\000\000\000\000\000\000\070\000\071\000\072\000\
\073\000\074\000\075\000\076\000\077\000\078\000\079\000\080\000\
\081\000\082\000\083\000\084\000\085\000\066\000\000\000\000\000\
\000\000\070\000\071\000\072\000\073\000\000\000\000\000\076\000\
\077\000\078\000\079\000\080\000\081\000\082\000\083\000\084\000\
\085\000"

let yycheck = "\037\000\
\036\000\003\000\129\000\130\000\001\000\008\001\042\000\052\001\
\009\001\009\001\023\000\007\001\011\001\049\000\011\001\008\001\
\011\001\003\001\004\001\007\001\056\000\057\000\024\000\056\001\
\009\001\061\000\062\000\063\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\074\000\075\000\
\076\000\077\000\078\000\079\000\001\001\058\000\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\057\001\056\001\
\056\001\056\001\022\001\056\001\096\000\056\001\007\001\055\001\
\021\001\008\001\008\001\008\001\025\001\026\001\022\001\022\001\
\007\001\056\001\001\001\055\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\009\001\121\000\056\001\125\000\
\126\000\002\001\054\001\020\001\007\001\056\001\021\001\052\001\
\053\001\054\001\025\001\026\001\056\001\139\000\054\001\054\001\
\009\001\143\000\142\000\009\001\009\001\008\001\001\001\149\000\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\000\000\009\001\009\001\055\001\009\001\052\001\053\001\054\001\
\009\001\055\001\021\001\052\000\001\000\255\255\025\001\026\001\
\255\255\255\255\255\255\255\255\001\001\255\255\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\001\001\255\255\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\021\001\052\001\053\001\054\001\025\001\026\001\255\255\255\255\
\255\255\255\255\021\001\255\255\255\255\255\255\025\001\026\001\
\255\255\255\255\255\255\009\001\001\001\011\001\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\255\255\052\001\
\053\001\054\001\255\255\255\255\255\255\255\255\028\001\029\001\
\021\001\052\001\053\001\054\001\025\001\026\001\255\255\255\255\
\009\001\255\255\011\001\255\255\255\255\255\255\001\001\255\255\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\255\255\055\001\056\001\028\001\029\001\255\255\255\255\052\001\
\053\001\054\001\021\001\255\255\255\255\024\001\025\001\026\001\
\255\255\255\255\255\255\001\001\255\255\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\255\255\055\001\056\001\
\046\001\047\001\048\001\049\001\050\001\051\001\255\255\021\001\
\255\255\052\001\053\001\025\001\026\001\032\001\255\255\255\255\
\255\255\036\001\037\001\038\001\039\001\255\255\009\001\255\255\
\011\001\255\255\255\255\046\001\047\001\048\001\049\001\050\001\
\051\001\255\255\255\255\255\255\255\255\255\255\052\001\053\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\009\001\255\255\011\001\055\001\056\001\001\001\255\255\
\003\001\004\001\005\001\006\001\007\001\008\001\255\255\010\001\
\255\255\255\255\255\255\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\009\001\255\255\
\011\001\255\255\255\255\255\255\255\255\255\255\255\255\055\001\
\056\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\009\001\255\255\011\001\255\255\255\255\
\255\255\255\255\255\255\255\255\055\001\056\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\009\001\255\255\011\001\255\255\255\255\255\255\255\255\255\255\
\255\255\055\001\056\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\027\001\028\001\029\001\030\001\031\001\255\255\
\033\001\034\001\035\001\036\001\037\001\255\255\255\255\040\001\
\041\001\042\001\043\001\044\001\045\001\009\001\255\255\011\001\
\255\255\255\255\255\255\255\255\255\255\255\255\055\001\056\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\027\001\
\028\001\029\001\030\001\031\001\255\255\033\001\034\001\035\001\
\036\001\037\001\255\255\255\255\040\001\041\001\042\001\043\001\
\044\001\045\001\009\001\255\255\011\001\255\255\255\255\255\255\
\255\255\255\255\255\255\055\001\056\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\027\001\028\001\029\001\030\001\
\031\001\255\255\033\001\034\001\035\001\255\255\255\255\255\255\
\255\255\040\001\041\001\042\001\043\001\044\001\045\001\009\001\
\255\255\011\001\255\255\255\255\255\255\255\255\255\255\255\255\
\055\001\056\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\027\001\028\001\029\001\030\001\031\001\255\255\033\001\
\034\001\035\001\255\255\255\255\255\255\255\255\040\001\041\001\
\042\001\043\001\044\001\045\001\009\001\255\255\011\001\255\255\
\255\255\255\255\255\255\255\255\255\255\055\001\056\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\027\001\028\001\
\029\001\030\001\031\001\255\255\033\001\034\001\035\001\255\255\
\255\255\255\255\255\255\040\001\041\001\042\001\043\001\044\001\
\045\001\009\001\255\255\011\001\255\255\255\255\255\255\255\255\
\255\255\255\255\055\001\056\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\027\001\028\001\029\001\030\001\031\001\
\255\255\033\001\034\001\035\001\255\255\255\255\255\255\255\255\
\040\001\041\001\042\001\043\001\044\001\045\001\009\001\255\255\
\011\001\255\255\255\255\255\255\255\255\255\255\255\255\055\001\
\056\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\027\001\028\001\029\001\030\001\031\001\255\255\033\001\034\001\
\035\001\255\255\255\255\255\255\255\255\040\001\041\001\009\001\
\001\001\011\001\003\001\004\001\005\001\006\001\007\001\008\001\
\255\255\010\001\255\255\255\255\055\001\056\001\009\001\255\255\
\011\001\027\001\028\001\029\001\030\001\031\001\255\255\033\001\
\034\001\035\001\255\255\255\255\255\255\255\255\040\001\041\001\
\027\001\028\001\029\001\030\001\031\001\255\255\033\001\034\001\
\035\001\255\255\255\255\255\255\255\255\055\001\056\001\009\001\
\255\255\011\001\255\255\255\255\255\255\255\255\255\255\009\001\
\255\255\011\001\255\255\255\255\055\001\056\001\255\255\255\255\
\255\255\027\001\028\001\029\001\030\001\031\001\255\255\255\255\
\034\001\035\001\028\001\029\001\030\001\031\001\009\001\255\255\
\011\001\035\001\255\255\255\255\255\255\255\255\009\001\255\255\
\011\001\255\255\255\255\255\255\255\255\055\001\056\001\255\255\
\255\255\028\001\029\001\030\001\031\001\055\001\056\001\255\255\
\035\001\028\001\029\001\030\001\031\001\009\001\255\255\011\001\
\035\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\255\255\255\255\255\255\055\001\056\001\255\255\255\255\
\028\001\029\001\030\001\031\001\055\001\056\001\032\001\035\001\
\255\255\255\255\255\255\009\001\038\001\039\001\255\255\255\255\
\255\255\255\255\255\255\255\255\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\055\001\056\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\051\001\009\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\009\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\009\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\009\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\009\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\051\001\255\255\255\255\
\255\255\055\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\027\001\255\255\255\255\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\027\001\255\255\255\255\255\255\
\255\255\032\001\033\001\034\001\255\255\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\032\001\033\001\255\255\
\255\255\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\032\001\255\255\255\255\255\255\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\032\001\255\255\255\255\
\255\255\036\001\037\001\038\001\039\001\255\255\255\255\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001"

let yynames_const = "\
  LEFTPAREN\000\
  RIGHTPAREN\000\
  LBRAC\000\
  RBRAC\000\
  EOF\000\
  INT\000\
  NOTE\000\
  CHORD\000\
  SCALE\000\
  STANZA\000\
  SCORE\000\
  VOID\000\
  BOOL\000\
  IN\000\
  IF\000\
  ELSE\000\
  NOELSE\000\
  ELSIF\000\
  WHILE\000\
  FOREACH\000\
  ASSIGN\000\
  PLUSEQ\000\
  MINUSEQ\000\
  TIMESEQ\000\
  DIVIDEEQ\000\
  MOD\000\
  AND\000\
  OR\000\
  MODEQ\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  IS\000\
  ISNT\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  PLUSPLUS\000\
  MINUSMINUS\000\
  SHARP\000\
  FLAT\000\
  RAISE\000\
  LOWER\000\
  METH\000\
  RETURN\000\
  END\000\
  SEMICOLON\000\
  COMMA\000\
  DOT\000\
  "

let yynames_block = "\
  INTLITERAL\000\
  OCTAVE\000\
  DURATIONINT\000\
  DURATIONCONST\000\
  NOTECONST\000\
  BOOLLITERAL\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 74 "parser.mly"
               ( NoExpr )
# 616 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'methdecl) in
    Obj.repr(
# 75 "parser.mly"
            ( _1 )
# 623 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cb_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 80 "parser.mly"
  ({ vartype = _1;
			varname = _2 })
# 632 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 84 "parser.mly"
                  ( [] )
# 638 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 85 "parser.mly"
                    ( _2 :: _1 )
# 646 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'cb_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'meth_params) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 89 "parser.mly"
  ( {
			rettype = _2;
			fname = _3;
			formals = _5;
			locals = List.rev _7;
			body = List.rev _8 } )
# 662 "parser.ml"
               : 'methdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 97 "parser.mly"
                                           ( Int )
# 668 "parser.ml"
               : 'cb_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 98 "parser.mly"
                                          ( Note )
# 674 "parser.ml"
               : 'cb_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 99 "parser.mly"
                                            ( Chord )
# 680 "parser.ml"
               : 'cb_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 100 "parser.mly"
                                          ( Scale )
# 686 "parser.ml"
               : 'cb_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 101 "parser.mly"
                                          ( Bool )
# 692 "parser.ml"
               : 'cb_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 102 "parser.mly"
                                          ( Stanza )
# 698 "parser.ml"
               : 'cb_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 103 "parser.mly"
                                         ( Score )
# 704 "parser.ml"
               : 'cb_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 104 "parser.mly"
                                       ( Void )
# 710 "parser.ml"
               : 'cb_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 107 "parser.mly"
 ( [] )
# 716 "parser.ml"
               : 'meth_params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param_list) in
    Obj.repr(
# 108 "parser.mly"
              ( List.rev(_1) )
# 723 "parser.ml"
               : 'meth_params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param_decl) in
    Obj.repr(
# 111 "parser.mly"
            ( [_1] )
# 730 "parser.ml"
               : 'param_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'param_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'param_decl) in
    Obj.repr(
# 112 "parser.mly"
                               ( _3 :: _1 )
# 738 "parser.ml"
               : 'param_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'cb_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 116 "parser.mly"
  ( {	paramname = _2;
			paramtype = _1 } )
# 747 "parser.ml"
               : 'param_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 120 "parser.mly"
 ( [] )
# 753 "parser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 121 "parser.mly"
                            ( _2 :: _1 )
# 761 "parser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'methdecl) in
    Obj.repr(
# 122 "parser.mly"
                           ( _2 :: _1 )
# 769 "parser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                ( Expr(_1) )
# 776 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 126 "parser.mly"
                             ( Return(_2) )
# 783 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 127 "parser.mly"
                                 ( Block(List.rev _2) )
# 790 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'statement_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'elsif_statement) in
    Obj.repr(
# 128 "parser.mly"
                                                                                ( If(_3, _5, _6, Block([])) )
# 799 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'statement_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'elsif_statement) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 129 "parser.mly"
                                                                                       ( If(_3, _5, _6, Block(List.rev _8)) )
# 809 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 130 "parser.mly"
                                                      ( While(_3, _5) )
# 817 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'param_decl) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 131 "parser.mly"
                                                                    ( Foreach(_3, _5, _7))
# 826 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 134 "parser.mly"
                    ( Block([]) )
# 832 "parser.ml"
               : 'elsif_statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'statement_list) in
    Obj.repr(
# 135 "parser.mly"
                                                  ( ElseIf(_3, _5) )
# 840 "parser.ml"
               : 'elsif_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 138 "parser.mly"
             ( DurInt(_1) )
# 847 "parser.ml"
               : 'duration_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 139 "parser.mly"
                 ( DurConst(_1) )
# 854 "parser.ml"
               : 'duration_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 146 "parser.mly"
                               ( [] )
# 860 "parser.ml"
               : 'generic_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'generic_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 147 "parser.mly"
                           (_3 :: _1)
# 868 "parser.ml"
               : 'generic_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 151 "parser.mly"
               ( NoExpr )
# 874 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 152 "parser.mly"
        ( _1 )
# 881 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 155 "parser.mly"
    ( Id(_1) )
# 888 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 156 "parser.mly"
             ( MemberAccess(_1, _3) )
# 896 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 157 "parser.mly"
              ( IntLiteral(_1) )
# 903 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 158 "parser.mly"
             ( NoteConst(_1))
# 910 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 159 "parser.mly"
               (BoolLiteral(_1))
# 917 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'duration_expr) in
    Obj.repr(
# 162 "parser.mly"
                 ( _1 )
# 924 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'duration_expr) in
    Obj.repr(
# 163 "parser.mly"
                                                                    ( NoteExpr(_2, _4, _6) )
# 933 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'generic_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'duration_expr) in
    Obj.repr(
# 164 "parser.mly"
                                                                       ( ChordExpr(_3, _6) )
# 941 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'generic_list) in
    Obj.repr(
# 165 "parser.mly"
                            ( ListExpr(_2) )
# 948 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 167 "parser.mly"
                         ( Assign(_1, _3) )
# 956 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 168 "parser.mly"
                       ( Assign(_1, BinOp(_1, Add, _3)) )
# 964 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 169 "parser.mly"
                     ( Assign(_1, BinOp(_1, Sub, _3)) )
# 972 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 170 "parser.mly"
                     ( Assign(_1, BinOp(_1, Mult, _3)) )
# 980 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 171 "parser.mly"
                      ( Assign(_1, BinOp(_1, Div, _3)) )
# 988 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 172 "parser.mly"
                   ( Assign(_1, BinOp(_1, Mod, _3)) )
# 996 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 173 "parser.mly"
                  ( BinOp(_1, Add, _3) )
# 1004 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 174 "parser.mly"
                   ( BinOp(_1, Sub, _3) )
# 1012 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 175 "parser.mly"
                   ( BinOp(_1, Mult, _3) )
# 1020 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 176 "parser.mly"
                    ( BinOp(_1, Div, _3) )
# 1028 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 177 "parser.mly"
                 ( BinOp(_1, Mod, _3) )
# 1036 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 178 "parser.mly"
                 ( BinOp(_1, And, _3) )
# 1044 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 179 "parser.mly"
                ( BinOp(_1, Or, _3) )
# 1052 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 180 "parser.mly"
                ( BinOp(_1, Eq, _3) )
# 1060 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 181 "parser.mly"
                  ( BinOp(_1, NEq, _3) )
# 1068 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 182 "parser.mly"
                ( BinOp(_1, Less, _3) )
# 1076 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 183 "parser.mly"
                 ( BinOp(_1, LEq, _3) )
# 1084 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 184 "parser.mly"
                ( BinOp(_1, Greater, _3) )
# 1092 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 185 "parser.mly"
                 ( BinOp(_1, GEq, _3) )
# 1100 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 186 "parser.mly"
                 ( Assign(_1, BinOp(_1, Add, IntLiteral(1))) )
# 1107 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 187 "parser.mly"
                   ( Assign(_1, BinOp(_1, Sub, IntLiteral(1))) )
# 1114 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 188 "parser.mly"
              ( UnaryOp(Sharp, _1) )
# 1121 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 189 "parser.mly"
              ( UnaryOp(Flat, _1) )
# 1128 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 190 "parser.mly"
              ( UnaryOp(Raise, _1) )
# 1135 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 191 "parser.mly"
              ( UnaryOp(Lower, _1) )
# 1142 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 192 "parser.mly"
                             ( _2 )
# 1149 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 193 "parser.mly"
                                       ( MethodCall(_1, _3) )
# 1157 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 196 "parser.mly"
 ( [] )
# 1163 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 197 "parser.mly"
                ( List.rev _1 )
# 1170 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 200 "parser.mly"
      ( [_1] )
# 1177 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 201 "parser.mly"
                           ( _3 :: _1 )
# 1185 "parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
