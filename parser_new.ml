type token =
  | INTLITERAL of (int)
  | OCTAVE of (int)
  | DURATIONINT of (int)
  | BOOL of (bool)
  | DURATIONCONST of (string)
  | STRING of (string)
  | DATATYPE of (string)
  | NOTECONST of (string)
  | ID of (string)
  | IN
  | IF
  | ELSE
  | NOELSE
  | WHILE
  | FOREACH
  | ASSIGN
  | OR
  | AND
  | PLUSEQ
  | MINUSEQ
  | TIMESEQ
  | DIVIDEEQ
  | MOD
  | MODEQ
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | VERACITY
  | NOT
  | IS
  | ISNT
  | LT
  | LEQ
  | GT
  | GEQ
  | PLUSPLUS
  | MINUSMINUS
  | SHARP
  | FLAT
  | RAISE
  | LOWER
  | LEFTPAREN
  | RIGHTPAREN
  | LBRAC
  | RBRAC
  | INT
  | NOTE
  | CHORD
  | SCALE
  | STANZA
  | SCORE
  | METH
  | RETURN
  | END
  | VASSIGN
  | SEMICOLON
  | COMMA
  | DOT

open Parsing;;
# 1 "parser_new.mly"
 open Ast_tmp 
# 66 "parser_new.ml"
let yytransl_const = [|
  266 (* IN *);
  267 (* IF *);
  268 (* ELSE *);
  269 (* NOELSE *);
  270 (* WHILE *);
  271 (* FOREACH *);
  272 (* ASSIGN *);
  273 (* OR *);
  274 (* AND *);
  275 (* PLUSEQ *);
  276 (* MINUSEQ *);
  277 (* TIMESEQ *);
  278 (* DIVIDEEQ *);
  279 (* MOD *);
  280 (* MODEQ *);
  281 (* PLUS *);
  282 (* MINUS *);
  283 (* TIMES *);
  284 (* DIVIDE *);
  285 (* VERACITY *);
  286 (* NOT *);
  287 (* IS *);
  288 (* ISNT *);
  289 (* LT *);
  290 (* LEQ *);
  291 (* GT *);
  292 (* GEQ *);
  293 (* PLUSPLUS *);
  294 (* MINUSMINUS *);
  295 (* SHARP *);
  296 (* FLAT *);
  297 (* RAISE *);
  298 (* LOWER *);
  299 (* LEFTPAREN *);
  300 (* RIGHTPAREN *);
  301 (* LBRAC *);
  302 (* RBRAC *);
  303 (* INT *);
  304 (* NOTE *);
  305 (* CHORD *);
  306 (* SCALE *);
  307 (* STANZA *);
  308 (* SCORE *);
  309 (* METH *);
  310 (* RETURN *);
  311 (* END *);
  312 (* VASSIGN *);
  313 (* SEMICOLON *);
  314 (* COMMA *);
  315 (* DOT *);
    0|]

let yytransl_block = [|
  257 (* INTLITERAL *);
  258 (* OCTAVE *);
  259 (* DURATIONINT *);
  260 (* BOOL *);
  261 (* DURATIONCONST *);
  262 (* STRING *);
  263 (* DATATYPE *);
  264 (* NOTECONST *);
  265 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\003\000\004\000\004\000\006\000\006\000\
\007\000\005\000\005\000\008\000\008\000\008\000\008\000\008\000\
\008\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\012\000\012\000\011\000\011\000\011\000\011\000\011\000\
\011\000\010\000\010\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\013\000\013\000\014\000\014\000\000\000"

let yylen = "\002\000\
\000\000\002\000\002\000\008\000\000\000\001\000\001\000\003\000\
\002\000\000\000\002\000\002\000\003\000\006\000\008\000\006\000\
\008\000\003\000\005\000\011\000\005\000\011\000\006\000\006\000\
\006\000\000\000\003\000\001\000\001\000\003\000\003\000\003\000\
\003\000\000\000\001\000\001\000\003\000\001\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\002\000\002\000\002\000\002\000\002\000\002\000\
\003\000\004\000\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\002\000\003\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\018\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\026\000\026\000\026\000\000\000\
\019\000\021\000\000\000\026\000\000\000\000\000\000\000\000\000\
\000\000\000\000\007\000\000\000\000\000\023\000\000\000\024\000\
\025\000\009\000\010\000\000\000\000\000\000\000\027\000\000\000\
\008\000\000\000\000\000\038\000\000\000\000\000\000\000\000\000\
\000\000\000\000\004\000\011\000\000\000\028\000\029\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\059\000\060\000\061\000\
\062\000\063\000\064\000\012\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\037\000\000\000\000\000\
\000\000\065\000\013\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\032\000\033\000\020\000\022\000\066\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014\000\
\016\000\000\000\000\000\000\000\015\000\017\000"

let yydgoto = "\002\000\
\003\000\013\000\014\000\049\000\064\000\050\000\051\000\076\000\
\077\000\089\000\080\000\045\000\124\000\125\000"

let yysindex = "\002\000\
\000\000\000\000\054\255\029\255\046\255\063\255\065\255\091\255\
\112\255\139\255\167\255\000\255\000\000\000\000\240\254\123\255\
\125\255\130\255\132\255\133\255\134\255\161\255\209\255\194\255\
\000\000\218\255\181\255\186\255\187\255\188\255\215\255\219\255\
\174\255\204\255\009\000\242\255\000\000\000\000\000\000\039\000\
\000\000\000\000\248\255\000\000\214\254\027\255\031\255\051\000\
\017\000\004\000\000\000\061\000\089\255\000\000\055\000\000\000\
\000\000\000\000\000\000\039\000\007\000\008\000\000\000\036\255\
\000\000\003\255\003\255\000\000\254\254\032\000\034\000\035\000\
\001\255\001\255\000\000\000\000\031\001\000\000\000\000\043\255\
\147\255\001\255\070\000\001\255\001\255\039\000\098\001\185\001\
\025\000\001\255\001\255\001\255\001\255\001\255\001\255\001\255\
\001\255\001\255\001\255\001\255\001\255\001\255\001\255\001\255\
\001\255\001\255\001\255\001\255\001\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\003\255\003\255\003\255\003\255\
\033\000\036\000\185\001\045\000\037\000\000\000\127\001\156\001\
\082\000\000\000\000\000\239\001\008\002\028\002\212\001\212\001\
\239\001\239\001\251\255\239\001\055\255\055\255\251\255\251\255\
\001\001\067\001\067\001\001\001\001\001\001\001\001\001\118\255\
\118\255\000\000\000\000\000\000\000\000\000\000\001\255\045\255\
\045\255\085\000\185\001\249\254\049\000\047\000\045\255\000\000\
\000\000\045\255\053\000\056\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\106\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\063\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\074\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\092\255\000\000\000\000\000\000\
\000\000\062\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\076\000\000\000\000\000\000\000\000\000\000\000\064\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\018\255\000\000\078\000\000\000\000\000\000\000\
\000\000\000\000\000\000\120\255\244\000\235\000\251\254\023\255\
\163\255\206\255\135\255\055\001\250\255\023\000\178\255\221\255\
\052\000\189\000\218\000\081\000\110\000\139\000\168\000\190\255\
\233\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\040\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\245\255\057\001\
\183\255\000\000\202\255\099\000\000\000\000\000"

let yytablesize = 838
let yytable = "\087\000\
\088\000\068\000\001\000\054\000\167\000\078\000\023\000\079\000\
\123\000\069\000\127\000\128\000\081\000\040\000\040\000\055\000\
\132\000\133\000\134\000\135\000\136\000\137\000\138\000\139\000\
\140\000\141\000\142\000\143\000\144\000\145\000\146\000\147\000\
\148\000\149\000\150\000\151\000\068\000\015\000\040\000\024\000\
\082\000\041\000\041\000\073\000\069\000\068\000\070\000\168\000\
\065\000\071\000\072\000\040\000\040\000\069\000\016\000\070\000\
\083\000\004\000\071\000\072\000\005\000\069\000\152\000\153\000\
\154\000\155\000\041\000\117\000\118\000\119\000\120\000\017\000\
\056\000\018\000\129\000\069\000\057\000\097\000\073\000\041\000\
\041\000\101\000\102\000\070\000\055\000\163\000\121\000\073\000\
\055\000\074\000\075\000\110\000\111\000\112\000\113\000\114\000\
\115\000\070\000\074\000\019\000\006\000\007\000\008\000\009\000\
\010\000\011\000\012\000\036\000\036\000\036\000\036\000\036\000\
\036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
\020\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
\036\000\036\000\036\000\036\000\036\000\036\000\062\000\036\000\
\046\000\047\000\039\000\039\000\039\000\039\000\053\000\039\000\
\119\000\120\000\055\000\021\000\036\000\036\000\049\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
\049\000\049\000\049\000\039\000\049\000\049\000\049\000\049\000\
\049\000\049\000\049\000\117\000\118\000\119\000\120\000\022\000\
\039\000\039\000\049\000\025\000\026\000\042\000\042\000\042\000\
\042\000\027\000\042\000\028\000\029\000\030\000\122\000\049\000\
\049\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\042\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\030\000\030\000\
\031\000\032\000\034\000\042\000\042\000\047\000\033\000\035\000\
\043\000\043\000\043\000\043\000\036\000\043\000\041\000\037\000\
\038\000\030\000\047\000\047\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\043\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\031\000\031\000\039\000\042\000\040\000\043\000\043\000\
\048\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
\043\000\045\000\045\000\045\000\031\000\048\000\048\000\045\000\
\045\000\045\000\045\000\045\000\045\000\045\000\044\000\110\000\
\111\000\112\000\113\000\114\000\115\000\045\000\046\000\046\000\
\046\000\046\000\046\000\046\000\046\000\048\000\046\000\046\000\
\046\000\052\000\045\000\045\000\046\000\046\000\046\000\046\000\
\046\000\046\000\046\000\058\000\059\000\060\000\061\000\063\000\
\066\000\067\000\046\000\054\000\054\000\054\000\054\000\054\000\
\054\000\054\000\084\000\054\000\085\000\086\000\126\000\046\000\
\046\000\131\000\054\000\054\000\054\000\054\000\054\000\054\000\
\158\000\156\000\170\000\162\000\157\000\166\000\159\000\054\000\
\055\000\055\000\055\000\055\000\055\000\055\000\055\000\169\000\
\055\000\071\000\005\000\173\000\054\000\054\000\174\000\055\000\
\055\000\055\000\055\000\055\000\055\000\006\000\034\000\067\000\
\035\000\068\000\000\000\000\000\055\000\056\000\056\000\056\000\
\056\000\056\000\056\000\056\000\000\000\056\000\000\000\000\000\
\000\000\055\000\055\000\000\000\056\000\056\000\056\000\056\000\
\056\000\056\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\056\000\057\000\057\000\057\000\057\000\057\000\057\000\
\057\000\000\000\057\000\000\000\000\000\000\000\056\000\056\000\
\000\000\057\000\057\000\057\000\057\000\057\000\057\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\057\000\058\000\
\058\000\058\000\058\000\058\000\058\000\058\000\000\000\058\000\
\000\000\000\000\000\000\057\000\057\000\000\000\058\000\058\000\
\058\000\058\000\058\000\058\000\050\000\050\000\050\000\050\000\
\050\000\050\000\050\000\058\000\050\000\000\000\000\000\000\000\
\164\000\165\000\000\000\050\000\050\000\000\000\000\000\171\000\
\058\000\058\000\172\000\000\000\000\000\000\000\000\000\000\000\
\050\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
\000\000\051\000\000\000\000\000\000\000\050\000\050\000\000\000\
\051\000\051\000\052\000\052\000\052\000\052\000\052\000\052\000\
\052\000\000\000\052\000\053\000\053\000\051\000\053\000\053\000\
\053\000\053\000\000\000\053\000\000\000\000\000\000\000\000\000\
\000\000\000\000\051\000\051\000\000\000\000\000\052\000\097\000\
\000\000\099\000\100\000\101\000\102\000\000\000\103\000\053\000\
\000\000\000\000\000\000\052\000\052\000\110\000\111\000\112\000\
\113\000\114\000\115\000\000\000\053\000\053\000\090\000\091\000\
\092\000\093\000\094\000\095\000\096\000\097\000\098\000\099\000\
\100\000\101\000\102\000\000\000\103\000\104\000\105\000\106\000\
\107\000\108\000\109\000\110\000\111\000\112\000\113\000\114\000\
\115\000\044\000\044\000\044\000\044\000\000\000\044\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\116\000\
\000\000\097\000\000\000\099\000\100\000\101\000\102\000\000\000\
\103\000\000\000\044\000\106\000\107\000\108\000\109\000\110\000\
\111\000\112\000\113\000\114\000\115\000\000\000\000\000\044\000\
\044\000\090\000\091\000\092\000\093\000\094\000\095\000\096\000\
\097\000\098\000\099\000\100\000\101\000\102\000\000\000\103\000\
\104\000\105\000\106\000\107\000\108\000\109\000\110\000\111\000\
\112\000\113\000\114\000\115\000\000\000\130\000\090\000\091\000\
\092\000\093\000\094\000\095\000\096\000\097\000\098\000\099\000\
\100\000\101\000\102\000\000\000\103\000\104\000\105\000\106\000\
\107\000\108\000\109\000\110\000\111\000\112\000\113\000\114\000\
\115\000\000\000\160\000\090\000\091\000\092\000\093\000\094\000\
\095\000\096\000\097\000\098\000\099\000\100\000\101\000\102\000\
\000\000\103\000\104\000\105\000\106\000\107\000\108\000\109\000\
\110\000\111\000\112\000\113\000\114\000\115\000\000\000\161\000\
\090\000\091\000\092\000\093\000\094\000\095\000\096\000\097\000\
\098\000\099\000\100\000\101\000\102\000\000\000\103\000\104\000\
\105\000\106\000\107\000\108\000\109\000\110\000\111\000\112\000\
\113\000\114\000\115\000\090\000\091\000\092\000\000\000\000\000\
\095\000\096\000\097\000\098\000\099\000\100\000\101\000\102\000\
\000\000\103\000\104\000\105\000\106\000\107\000\108\000\109\000\
\110\000\111\000\112\000\113\000\114\000\115\000\090\000\091\000\
\092\000\000\000\000\000\000\000\000\000\097\000\000\000\099\000\
\100\000\101\000\102\000\000\000\103\000\104\000\105\000\106\000\
\107\000\108\000\109\000\110\000\111\000\112\000\113\000\114\000\
\115\000\092\000\000\000\000\000\000\000\000\000\097\000\000\000\
\099\000\100\000\101\000\102\000\000\000\103\000\104\000\105\000\
\106\000\107\000\108\000\109\000\110\000\111\000\112\000\113\000\
\114\000\115\000\097\000\000\000\099\000\100\000\101\000\102\000\
\000\000\103\000\104\000\105\000\106\000\107\000\108\000\109\000\
\110\000\111\000\112\000\113\000\114\000\115\000"

let yycheck = "\073\000\
\074\000\001\001\001\000\046\001\012\001\003\001\007\001\005\001\
\082\000\009\001\084\000\085\000\067\000\019\001\020\001\058\001\
\090\000\091\000\092\000\093\000\094\000\095\000\096\000\097\000\
\098\000\099\000\100\000\101\000\102\000\103\000\104\000\105\000\
\106\000\107\000\108\000\109\000\001\001\009\001\044\001\056\001\
\043\001\019\001\020\001\043\001\009\001\001\001\011\001\055\001\
\060\000\014\001\015\001\057\001\058\001\009\001\009\001\011\001\
\059\001\004\001\014\001\015\001\007\001\044\001\117\000\118\000\
\119\000\120\000\044\001\025\001\026\001\027\001\028\001\009\001\
\046\001\009\001\086\000\058\001\046\001\023\001\043\001\057\001\
\058\001\027\001\028\001\044\001\058\001\159\000\044\001\043\001\
\058\001\054\001\055\001\037\001\038\001\039\001\040\001\041\001\
\042\001\058\001\054\001\009\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\009\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\046\001\044\001\
\038\000\039\000\019\001\020\001\021\001\022\001\044\000\024\001\
\027\001\028\001\058\001\009\001\057\001\058\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\044\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\025\001\026\001\027\001\028\001\009\001\
\057\001\058\001\044\001\057\001\056\001\019\001\020\001\021\001\
\022\001\056\001\024\001\056\001\056\001\056\001\044\001\057\001\
\058\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\044\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\025\001\026\001\
\056\001\009\001\001\001\057\001\058\001\044\001\029\001\043\001\
\019\001\020\001\021\001\022\001\043\001\024\001\057\001\045\001\
\045\001\044\001\057\001\058\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\044\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\025\001\026\001\045\001\057\001\043\001\057\001\058\001\
\044\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\008\001\024\001\025\001\026\001\044\001\057\001\058\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\045\001\037\001\
\038\001\039\001\040\001\041\001\042\001\044\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\007\001\024\001\025\001\
\026\001\058\001\057\001\058\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\009\001\044\001\058\001\002\001\009\001\
\058\001\058\001\044\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\043\001\024\001\043\001\043\001\009\001\057\001\
\058\001\057\001\031\001\032\001\033\001\034\001\035\001\036\001\
\044\001\057\001\044\001\010\001\057\001\009\001\058\001\044\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\055\001\
\024\001\000\000\044\001\055\001\057\001\058\001\055\001\031\001\
\032\001\033\001\034\001\035\001\036\001\044\001\057\001\044\001\
\057\001\044\001\255\255\255\255\044\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\255\255\024\001\255\255\255\255\
\255\255\057\001\058\001\255\255\031\001\032\001\033\001\034\001\
\035\001\036\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\044\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\255\255\024\001\255\255\255\255\255\255\057\001\058\001\
\255\255\031\001\032\001\033\001\034\001\035\001\036\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\044\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\255\255\024\001\
\255\255\255\255\255\255\057\001\058\001\255\255\031\001\032\001\
\033\001\034\001\035\001\036\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\044\001\024\001\255\255\255\255\255\255\
\160\000\161\000\255\255\031\001\032\001\255\255\255\255\167\000\
\057\001\058\001\170\000\255\255\255\255\255\255\255\255\255\255\
\044\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\255\255\024\001\255\255\255\255\255\255\057\001\058\001\255\255\
\031\001\032\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\255\255\024\001\016\001\017\001\044\001\019\001\020\001\
\021\001\022\001\255\255\024\001\255\255\255\255\255\255\255\255\
\255\255\255\255\057\001\058\001\255\255\255\255\044\001\023\001\
\255\255\025\001\026\001\027\001\028\001\255\255\030\001\044\001\
\255\255\255\255\255\255\057\001\058\001\037\001\038\001\039\001\
\040\001\041\001\042\001\255\255\057\001\058\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\255\255\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\019\001\020\001\021\001\022\001\255\255\024\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\057\001\
\255\255\023\001\255\255\025\001\026\001\027\001\028\001\255\255\
\030\001\255\255\044\001\033\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\255\255\255\255\057\001\
\058\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\255\255\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\255\255\044\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\255\255\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\255\255\044\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\255\255\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\255\255\044\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\016\001\017\001\018\001\255\255\255\255\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\255\255\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\016\001\017\001\
\018\001\255\255\255\255\255\255\255\255\023\001\255\255\025\001\
\026\001\027\001\028\001\255\255\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\018\001\255\255\255\255\255\255\255\255\023\001\255\255\
\025\001\026\001\027\001\028\001\255\255\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\023\001\255\255\025\001\026\001\027\001\028\001\
\255\255\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001"

let yynames_const = "\
  IN\000\
  IF\000\
  ELSE\000\
  NOELSE\000\
  WHILE\000\
  FOREACH\000\
  ASSIGN\000\
  OR\000\
  AND\000\
  PLUSEQ\000\
  MINUSEQ\000\
  TIMESEQ\000\
  DIVIDEEQ\000\
  MOD\000\
  MODEQ\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  VERACITY\000\
  NOT\000\
  IS\000\
  ISNT\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  PLUSPLUS\000\
  MINUSMINUS\000\
  SHARP\000\
  FLAT\000\
  RAISE\000\
  LOWER\000\
  LEFTPAREN\000\
  RIGHTPAREN\000\
  LBRAC\000\
  RBRAC\000\
  INT\000\
  NOTE\000\
  CHORD\000\
  SCALE\000\
  STANZA\000\
  SCORE\000\
  METH\000\
  RETURN\000\
  END\000\
  VASSIGN\000\
  SEMICOLON\000\
  COMMA\000\
  DOT\000\
  "

let yynames_block = "\
  INTLITERAL\000\
  OCTAVE\000\
  DURATIONINT\000\
  BOOL\000\
  DURATIONCONST\000\
  STRING\000\
  DATATYPE\000\
  NOTECONST\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 76 "parser_new.mly"
( [], [] )
# 520 "parser_new.ml"
               : Ast_tmp.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast_tmp.program) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 77 "parser_new.mly"
                ( (_2 :: fst _1), snd _1 )
# 528 "parser_new.ml"
               : Ast_tmp.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast_tmp.program) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'methdecl) in
    Obj.repr(
# 78 "parser_new.mly"
                   ( TODO() )
# 536 "parser_new.ml"
               : Ast_tmp.program))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'meth_params) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 81 "parser_new.mly"
                                                                      ( TODO() )
# 546 "parser_new.ml"
               : 'methdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 84 "parser_new.mly"
 ( [] )
# 552 "parser_new.ml"
               : 'meth_params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param_list) in
    Obj.repr(
# 85 "parser_new.mly"
              ( List.rev(_1) )
# 559 "parser_new.ml"
               : 'meth_params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param_decl) in
    Obj.repr(
# 88 "parser_new.mly"
            ( [_1] )
# 566 "parser_new.ml"
               : 'param_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'param_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'param_decl) in
    Obj.repr(
# 89 "parser_new.mly"
                               ( _3 :: _1 )
# 574 "parser_new.ml"
               : 'param_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 92 "parser_new.mly"
             ( TODO() )
# 582 "parser_new.ml"
               : 'param_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 95 "parser_new.mly"
 ( [] )
# 588 "parser_new.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 96 "parser_new.mly"
                            ( _2 :: _1 )
# 596 "parser_new.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 99 "parser_new.mly"
                ( TODO() )
# 603 "parser_new.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 100 "parser_new.mly"
                             ( Return(_2) )
# 610 "parser_new.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'statement) in
    Obj.repr(
# 101 "parser_new.mly"
                                                           ( If(_3, _5, Block([])) )
# 618 "parser_new.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'statement) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'statement) in
    Obj.repr(
# 102 "parser_new.mly"
                                                             ( If(_3, _5, _7) )
# 627 "parser_new.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'statement) in
    Obj.repr(
# 103 "parser_new.mly"
                                                 ( While(_3, _5) )
# 635 "parser_new.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'param_decl) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'statement) in
    Obj.repr(
# 104 "parser_new.mly"
                                                               (TODO())
# 644 "parser_new.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 107 "parser_new.mly"
                       ({ vartype = _1; varname = _2})
# 652 "parser_new.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : bool) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    Obj.repr(
# 108 "parser_new.mly"
                                      ( TODO(_2) )
# 660 "parser_new.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _9 = (Parsing.peek_val __caml_parser_env 2 : 'duration_expr) in
    Obj.repr(
# 109 "parser_new.mly"
                                                                                             ( TODO() )
# 670 "parser_new.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 110 "parser_new.mly"
                                       ( TODO(_2) )
# 678 "parser_new.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 5 : 'generic_list) in
    let _9 = (Parsing.peek_val __caml_parser_env 2 : 'duration_expr) in
    Obj.repr(
# 111 "parser_new.mly"
                                                                                                 ( TODO() )
# 687 "parser_new.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'generic_list) in
    Obj.repr(
# 112 "parser_new.mly"
                                             ( TODO{} )
# 695 "parser_new.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'generic_list) in
    Obj.repr(
# 113 "parser_new.mly"
                                              ( TODO{} )
# 703 "parser_new.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'generic_list) in
    Obj.repr(
# 114 "parser_new.mly"
                                             ( TODO{} )
# 711 "parser_new.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 117 "parser_new.mly"
 ( [%1] )
# 717 "parser_new.ml"
               : 'generic_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'generic_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 118 "parser_new.mly"
                         ( _3 :: _1 )
# 725 "parser_new.ml"
               : 'generic_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 121 "parser_new.mly"
             ( _1 )
# 732 "parser_new.ml"
               : 'duration_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 122 "parser_new.mly"
                 ( _1 )
# 739 "parser_new.ml"
               : 'duration_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'duration_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'duration_expr) in
    Obj.repr(
# 123 "parser_new.mly"
                                    ( Binop(_1, Add, _3)  )
# 747 "parser_new.ml"
               : 'duration_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'duration_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'duration_expr) in
    Obj.repr(
# 124 "parser_new.mly"
                                     ( Binop(_1, Sub, _3)  )
# 755 "parser_new.ml"
               : 'duration_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'duration_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'duration_expr) in
    Obj.repr(
# 125 "parser_new.mly"
                                     ( Binop(_1, Mult, _3)  )
# 763 "parser_new.ml"
               : 'duration_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'duration_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'duration_expr) in
    Obj.repr(
# 126 "parser_new.mly"
                                      ( Binop(_1, Div, _3)  )
# 771 "parser_new.ml"
               : 'duration_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 129 "parser_new.mly"
 ( NoExpr )
# 777 "parser_new.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "parser_new.mly"
        ( _1 )
# 784 "parser_new.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 133 "parser_new.mly"
    ( Id(_1) )
# 791 "parser_new.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 134 "parser_new.mly"
             ( TODO() )
# 799 "parser_new.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 135 "parser_new.mly"
              ( TODO() )
# 806 "parser_new.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 136 "parser_new.mly"
                    ( TODO() )
# 814 "parser_new.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 137 "parser_new.mly"
                    ( Assign(_1, BinOp(_1, Add, _3)) )
# 822 "parser_new.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 138 "parser_new.mly"
                     ( Assign(_1, BinOp(_1, Sub, _3)) )
# 830 "parser_new.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 139 "parser_new.mly"
                     ( Assign(_1, BinOp(_1, Mult, _3)) )
# 838 "parser_new.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 140 "parser_new.mly"
                      ( Assign(_1, BinOp(_1, Div, _3)) )
# 846 "parser_new.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 141 "parser_new.mly"
                   ( Assign(_1, BinOp(_1, Mod, _3)) )
# 854 "parser_new.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 142 "parser_new.mly"
                  ( BinOp(_1, Add, _3) )
# 862 "parser_new.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 143 "parser_new.mly"
                   ( BinOp(_1, Sub, _3) )
# 870 "parser_new.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 144 "parser_new.mly"
                   ( BinOp(_1, Mult, _3) )
# 878 "parser_new.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 145 "parser_new.mly"
                    ( BinOp(_1, Div, _3) )
# 886 "parser_new.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 146 "parser_new.mly"
                 ( BinOp(_1, Mod, _3) )
# 894 "parser_new.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 147 "parser_new.mly"
                ( BinOp(_1, Eq, _3) )
# 902 "parser_new.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 148 "parser_new.mly"
                  ( BinOp(_1, NEq, _3) )
# 910 "parser_new.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 149 "parser_new.mly"
                 ( BinOp(_1, And, _3) )
# 918 "parser_new.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 150 "parser_new.mly"
                ( BinOp(_1, Or, _3) )
# 926 "parser_new.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 151 "parser_new.mly"
                 ( BinOp(_1, Not, _3) )
# 934 "parser_new.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 152 "parser_new.mly"
                ( BinOp(_1, Less, _3) )
# 942 "parser_new.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 153 "parser_new.mly"
                 ( BinOp(_1, LEq, _3) )
# 950 "parser_new.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 154 "parser_new.mly"
                ( BinOp(_1, Greater, _3) )
# 958 "parser_new.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 155 "parser_new.mly"
                 ( BinOp(_1, GEq, _3) )
# 966 "parser_new.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 156 "parser_new.mly"
                 ( Assign(_1, BinOp(_1, Add, IntLiteral(1))) )
# 973 "parser_new.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 157 "parser_new.mly"
                   ( Assign(_1, BinOp(_1, Sub, IntLiteral(1))) )
# 980 "parser_new.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 158 "parser_new.mly"
              ( TODO() )
# 987 "parser_new.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 159 "parser_new.mly"
             ( TODO() )
# 994 "parser_new.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 160 "parser_new.mly"
              ( TODO() )
# 1001 "parser_new.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 161 "parser_new.mly"
              ( TODO() )
# 1008 "parser_new.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 162 "parser_new.mly"
                             ( _2 )
# 1015 "parser_new.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 163 "parser_new.mly"
                                       ( TODO() )
# 1023 "parser_new.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 166 "parser_new.mly"
 ( [] )
# 1029 "parser_new.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 167 "parser_new.mly"
                ( List.rev _1 )
# 1036 "parser_new.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 170 "parser_new.mly"
      ( [_1] )
# 1043 "parser_new.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 171 "parser_new.mly"
                           ( _3 :: _1 )
# 1051 "parser_new.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast_tmp.program)
